---
id: edde include
include:
  - shared.yml
---
metadata:
  title: |
    Defend Against an Eviction
  short title: |
    Eviction Defense
  title url: |
    https://motenanthelp.org/
  tags:
    - HO-02-00-00-00
  authors:
    - Quinten Steenhuis
    - Toby Fey
    - Ian Eisaman
    - Mia Bonardi
    - Stavros Constantinou
    - Ibrahim Hamzat
  al_weaver_version: "1.7.0"
  generated on: "2022-09-08"
---
id: edde modules
modules:
  - docassemble.ALToolbox.al_income
---
id: edde interview_short_title
code: |
  interview_short_title = "Eviction Defender"
---
id: edde sections block
sections:
  - section_eviction_answer_intro: Getting started
  - section_eviction_answer_can_i: Should you file an Answer?
  - section_eviction_answer_you: About you
  - section_eviction_answer_other: About your landlord
  - section_eviction_answer_case: About your court case
  - section_eviction_answer_tenancy: About your tenancy
  - section_eviction_answer_defenses: Claims and defenses
  - review_eviction_answer: Review your answers
  - section_eviction_discovery: Discovery
  - section_eviction_answer_download: Download, print, deliver, and file
---
id: edde user role
code: |
  user_role = user_ask_role = "defendant"
---
###################### Main order ######################
id: main order
mandatory: True
code: |
  al_intro_screen
  track_intro

  eviction_defender_intro
  document_order
  nav.set_section("review_eviction_answer")
  

  signpost_service_of_process
  nav.set_section("section_eviction_answer_download")  
  signature_date
  if other_parties[0].service_method == "email":
    other_parties[0].service_email
  elif other_parties[0].service_method in ["mail", "hand"]:
    other_parties[0].service_address.address
    
  review_eviction_answer
  track_review

  
  nav.set_section("section_eviction_discovery")
  precheck_items
  
  if wants_discovery:
    customize_discovery_choice
    if customize_discovery_choice == "customize_discovery":
      customize_discovery_requests
      review_discovery_requests
    if motion_to_shorten_time_attachment.enabled:
      motion_to_shorten_time_order
  
  motions_for_hearing
  notice_of_hearing_attachment.enabled
  

  set_progress(90)
  track_discovery


  signpost_service_of_process
  nav.set_section("section_eviction_answer_download")  
  signature_date
  if other_parties[0].service_method == "email":
    other_parties[0].service_email
  elif other_parties[0].service_method in ["mail", "hand"]:
    other_parties[0].service_address.address


  docket_review_conclusion
  set_progress(100)
  store_variables_snapshot(
      persistent=True,
      data={
          "start_time": start_time(timezone = 'America/Chicago'),
          "person_answering": showifdef("person_answering"),
          "is_right_to_counsel": showifdef("is_right_to_counsel"),
          "posting_warning": showifdef("posting_warning"),
          "zip": showifdef("users[0].address.zip"),
          "city": showifdef("users[0].address.city"),
          "county": showifdef("users[0].address.county"),
          "user_information_time": showifdef("snapshot_user_information_time"),
          "beginning_to_user_information_duration": showifdef("beginning_to_user_information_duration.minutes"),
          "case_information_time": showifdef("snapshot_case_information_time"),
          "user_to_case_information_duration": showifdef("user_to_case_information_duration.minutes"),
          "case_type": case_type.true_values().elements,
          "eviction_reason": eviction_reason.true_values().elements,
          "review_time": snapshot_review_time,
          "case_to_review_duration": showifdef("case_to_review_duration.minutes"),
          "discovery_time": snapshot_discovery_time,
          "defenses_list": showifdef("defenses_list"),
          "review_to_discovery_duration": review_to_discovery_duration.minutes,
          "assembled_documents": assembled_documents,
          "download_time": current_datetime(timezone = 'America/Chicago'),
          "discovery_to_final_duration": discovery_to_final_duration.minutes,
          "total_interview_duration": total_interview_duration.minutes,
          "reached_interview_end": True
      },
    )
  eviction_defender_download
---
id: snapshot_user_information_time
code: |
  snapshot_user_information_time = current_datetime(timezone = 'America/Chicago')
---
id: beginning_to_user_information_duration
code: |
  beginning_to_user_information_duration = date_difference(starting=start_time(timezone = 'America/Chicago'),ending = snapshot_user_information_time)
---
id: snapshot_case_information_time
code: |
  snapshot_case_information_time = current_datetime(timezone = 'America/Chicago')
---
id: user_to_case_information_duration
code: |
  user_to_case_information_duration = date_difference(starting=snapshot_user_information_time,ending = snapshot_case_information_time)
---
id: snapshot_review_time
code: |
  snapshot_review_time = current_datetime(timezone = 'America/Chicago')
---
id: case_to_review_duration
code: |
  case_to_review_duration = date_difference(starting=snapshot_case_information_time, ending = snapshot_review_time)
---
id: snapshot_discovery_time
code: |
  snapshot_discovery_time = current_datetime(timezone = 'America/Chicago')
---
id: review_to_discovery_duration
code: |
  review_to_discovery_duration = date_difference(starting=snapshot_review_time, ending = snapshot_discovery_time)
---
id: discovery_to_final_duration
code: |
  discovery_to_final_duration = date_difference(starting=snapshot_discovery_time, ending = current_datetime(timezone = 'America/Chicago') )
---
id: total_interview_duration
code: |
  total_interview_duration = date_difference(starting=start_time(timezone = 'America/Chicago'),ending = current_datetime(timezone = 'America/Chicago') )
---
id: defenses_list
comment: |
  This can't be the best way to do this. Can a DADict act like a checkboxes dictionary?
code: |
  temp_defenses_list = list()
  if defense_failure_to_terminate and "Failure to Terminate" not in temp_defenses_list:
    temp_defenses_list.append("Failure to Terminate")
  if defense_ud_no_written_notice and "No Notice" not in temp_defenses_list:
    temp_defenses_list.append("No Notice")
  if defense_ud_no_rental_period_notice and "Untimely Notice" not in temp_defenses_list:
    temp_defenses_list.append("Untimely Notice")
  if defense_ud_lease_requirements and "No Notice Required by Lease" not in temp_defenses_list:
    temp_defenses_list.append("No Notice Required by Lease")
  if defense_termination_notice_required_by_law and "No Notice Required by Law" not in temp_defenses_list:
    temp_defenses_list.append("No Notice Required by Law")
  if defense_ud_did_not_violate_lease and "No Violation of Lease" not in temp_defenses_list:
    temp_defenses_list.append("No Violation of Lease")
  if defense_ud_did_not_violate_lease and defense_no_breach and "No Breach" not in temp_defenses_list:
    temp_defenses_list.append("No Breach")
  if defense_ud_did_not_violate_lease and defense_breach_not_material and "Breach Not Material" not in temp_defenses_list:
    temp_defenses_list.append("Breach Not Material")
  if defense_discrimination and "Discrimination" not in temp_defenses_list:
    temp_defenses_list.append("Discrimination")
  if defense_reasonable_accommodation and "Failure to Provide Reasonable Accommodation" not in temp_defenses_list:
    temp_defenses_list.append("Failure to Provide Reasonable Accommodation")
  if defense_vawa and "VAWA Violation" not in temp_defenses_list:
    temp_defenses_list.append("VAWA Violation")
  if defense_rent_pleading_requirement and "Rent Pleading Requirement" not in temp_defenses_list:
    temp_defenses_list.append("Rent Pleading Requirement")
  if defense_lease_not_attached and "Lease Not Attached" not in temp_defenses_list:
    temp_defenses_list.append("Lease Not Attached")
  if defense_tender_refused and "Tender Refused" not in temp_defenses_list:
    temp_defenses_list.append("Tender Refused")
  if defense_rent_payment and "Rent Payment" not in temp_defenses_list:
    temp_defenses_list.append("Rent Payment")
  if defense_settlement and "Settlement" not in temp_defenses_list:
    temp_defenses_list.append("Settlement")
  if defense_lease_signed_under_duress and "Lease Signed Under Duress" not in temp_defenses_list:
    temp_defenses_list.append("Lease Signed Under Duress")
  if defense_fraud_lease and "Fraud in the inducement of the rental agreement" not in temp_defenses_list:
    temp_defenses_list.append("Fraud in the inducement of the rental agreement")
  if defense_liquidated_damages_late_fees and "Liquidated Damages Late Fees" not in temp_defenses_list:
    temp_defenses_list.append("Liquidated Damages Late Fees")
  if defense_estoppel_illegality and "Estoppel-Illegality" not in temp_defenses_list:
    temp_defenses_list.append("Estoppel-Illegality")
  if defense_breach_of_cqe and "Breach of CQE / privacy of tenant." not in temp_defenses_list:
    temp_defenses_list.append("Breach of CQE / privacy of tenant.")
  if defense_breach_of_habitability and "Breach Of Habitability" not in temp_defenses_list:
    temp_defenses_list.append("Breach Of Habitability")
  if defense_foreclosure and "Foreclosure" not in temp_defenses_list:
    temp_defenses_list.append("Foreclosure")
  if defense_new_owner_failed_to_provide_notice_of_sale and "New Owner Failed to Provide Notice of Sale" not in temp_defenses_list:
    temp_defenses_list.append("New Owner Failed to Provide Notice of Sale")
  if defense_unrepresented_corporation and "Unrepresented Corporation" not in temp_defenses_list:
    temp_defenses_list.append("Unrepresented Corporation")
  if defense_excessive_rent_for_subsidized_housing and "Excessive Rent for Subsidized Housing" not in temp_defenses_list:
    temp_defenses_list.append("Excessive Rent for Subsidized Housing")
  defenses_list = temp_defenses_list
---
id: track_intro
code: |
  store_variables_snapshot(
    persistent=True, 
    data={
        "start_time": start_time(timezone = 'America/Chicago'),
        "reached_interview_end": False
      },
  )
  track_intro = True
---
id: track_user_information
code: |
  store_variables_snapshot(
    persistent=True,
    data={
        "start_time": start_time(timezone = 'America/Chicago'),
        "person_answering": showifdef("person_answering"),
        "is_right_to_counsel": showifdef("is_right_to_counsel"),
        "posting_warning": showifdef("posting_warning"),
        "zip": showifdef("users[0].address.zip"),
        "city": showifdef("users[0].address.city"),
        "county": showifdef("users[0].address.county"),
        "user_information_time": snapshot_user_information_time,
        "beginning_to_user_information_duration": beginning_to_user_information_duration.minutes,
        "reached_interview_end": False,
    },
  )
  track_user_information = True
---
id: track_case_information
code: |
  store_variables_snapshot(
    persistent=True,
    data={
        "start_time": start_time(timezone = 'America/Chicago'),
        "person_answering": showifdef("person_answering"),
        "is_right_to_counsel": showifdef("is_right_to_counsel"),
        "posting_warning": showifdef("posting_warning"),
        "zip": showifdef("users[0].address.zip"),
        "city": showifdef("users[0].address.city"),
        "county": showifdef("users[0].address.county"),
        "user_information_time": snapshot_user_information_time,
        "beginning_to_user_information_duration": beginning_to_user_information_duration.minutes,
        "case_information_time": snapshot_case_information_time,
        "user_to_case_information_duration": user_to_case_information_duration.minutes,
        "case_type": case_type.true_values().elements,
        "eviction_reason": eviction_reason.true_values().elements,
        "reached_interview_end": False,
    },
  )
  track_case_information = True
---
id: track_review
code: |
  store_variables_snapshot(
    persistent=True,
    data={
        "start_time": start_time(timezone = 'America/Chicago'),
        "person_answering": showifdef("person_answering"),
        "is_right_to_counsel": showifdef("is_right_to_counsel"),
        "posting_warning": showifdef("posting_warning"),
        "zip": showifdef("users[0].address.zip"),
        "city": showifdef("users[0].address.city"),
        "county": showifdef("users[0].address.county"),
        "user_information_time": showifdef("snapshot_user_information_time"),
        "beginning_to_user_information_duration": beginning_to_user_information_duration.minutes,
        "case_information_time": showifdef("snapshot_case_information_time"),
        "user_to_case_information_duration": showifdef("user_to_case_information_duration.minutes"),
        "case_type": case_type.true_values().elements,
        "eviction_reason": eviction_reason.true_values().elements,
        "review_time": snapshot_review_time,
        "case_to_review_duration": showifdef("case_to_review_duration.minutes"),
        "discovery_time": showifdef("snapshot_discovery_time"),
        "defenses_list": showifdef("defenses_list"),
        "reached_interview_end": False
    },
  )
  track_review = True
---
id: track_discovery
code: |
  store_variables_snapshot(
      persistent=True,
      data={
          "start_time": start_time(timezone = 'America/Chicago'),
          "person_answering": showifdef("person_answering"),
          "is_right_to_counsel": showifdef("is_right_to_counsel"),
          "posting_warning": showifdef("posting_warning"),
          "zip": showifdef("users[0].address.zip"),
          "city": showifdef("users[0].address.city"),
          "county": showifdef("users[0].address.county"),
          "user_information_time": showifdef("snapshot_user_information_time"),
          "beginning_to_user_information_duration": showifdef("beginning_to_user_information_duration.minutes"),
          "case_information_time": showifdef("snapshot_case_information_time"),
          "user_to_case_information_duration": showifdef("user_to_case_information_duration.minutes"),
          "case_type": case_type.true_values().elements,
          "eviction_reason": eviction_reason.true_values().elements,
          "review_time": snapshot_review_time,
          "case_to_review_duration": showifdef("case_to_review_duration.minutes"),
          "discovery_time": snapshot_discovery_time,
          "defenses_list": showifdef("defenses_list"),
          "review_to_discovery_duration": review_to_discovery_duration.minutes,
          "assembled_documents": assembled_documents,
          "reached_interview_end": False
      },
  )
  track_discovery = True
---
#################### Interview order #####################
id: interview_order_eviction
comment: |
  Controls order and branching logic for questions specific to this form
code: |
  ############## Intro
  nav.set_section('section_eviction_answer_intro')
  landlord_doc_name
  tenant_doc_name
  users[0].name.first
  if person_answering == "tenant":
    greet_user
    users[0].attorney.target_number = 0
  elif person_answering == "attorney" and representation_type == "entering_appearance":
    users[0].attorney.target_number = 1
    users[0].attorney[0].name.first
    users[0].attorney[0].address.address
  else:
    users[0].attorney.target_number = 0

  ########## Should you file an answer?
  nav.set_section("section_eviction_answer_can_i")
  if not tenant_got_summons or not (method_of_summons_service['sheriff'] or ((method_of_summons_service['mail'] or method_of_summons_service['certified_mail']) and method_of_summons_service['posting'])):
    posting_warning
  else:
    recommend_filing_answer

  ######## About you
  nav.set_section("section_eviction_answer_you")
  users[0].address.address
  users[0].address.geocode()
  use_case_net_for_online_docket
  users.gather()

  track_user_information

  set_parts(subtitle=str(users))

  
  ######### About your landlord
  nav.set_section("section_eviction_answer_other")
    
  other_parties.gather()

  set_progress(25)
  ######### About your court case
  nav.set_section("section_eviction_answer_case")
  trial_court.county
  trial_court.circuit
  trial_court.name

  original_hearing_date
  if original_hearing_date_past:
    if final_judgment:
      if motion_to_set_aside_attachment.enabled:
        if motion_to_set_aside_judgment_order_exit:
          motion_to_set_aside_exit
      elif judgment_date_more_than_one_year:
        old_judgment_warning
  eviction_motion_to_continue_attachment.enabled
  eviction_motion_for_leave_attachment.enabled
  petition_date
    
  # Eviction reasons
  eviction_reason
  check_case_type
  if eviction_reason.any_true("lease violation", "criminal activity"):
    defense_no_breach

  ######## About your tenancy
  nav.set_section("section_eviction_answer_tenancy")  
  is_rent_subsidized
  # put kind of lease question here

  ######### Claims and defenses
  set_progress(50)
  track_case_information

  nav.set_section("section_eviction_answer_defenses")
  signpost_claims_and_defenses
  if got_notice_to_terminate:
    if not is_rent_subsidized and kind_of_lease_agreement == "fixed_period":
      lease_says_how_much_notice
  if (
    (has_written_lease and not lease_attached) 
    or not has_written_lease
  ):
    petition_states_terms_of_lease
  false_promises_exists
  unfair_duress

  if previous_landlord_sold_property:
    notice_of_sale_provided_new_landlord
  if landlord_foreclosed:
    notice_of_foreclosure
  
  set_progress(75)
  if eviction_reason["nonpayment of rent"]:
    petition_states_rent_amount
    petition_states_rent_periods
    offer_attempts.gather()
    was_rent_paid
    will_offer_payment
    if is_rent_subsidized:
      excessive_rent
    if late_fees_assessed and trial_court.circuit == 21:
      petition_separates_nonrent
  late_fees_assessed
  if eviction_reason["nonpayment of rent"]:
    petition_states_demand_made
    landlord_problems_section

  if landlord_agreement:
    tenant_compliance_with_agreement
  defense_logic
  any_defense_true
  information_collected
  
  nav.set_section("review_eviction_answer")
  explanation_answer
    
  document_order = True
---
id: motion_to_shorten_time_order
code: |
  trial_date
  if counsel_retained:
    days_before_trial
  opposing_party_consent_to_motion_to_shorten_time
  no_dilatory_motive 
  may_resolve_case_more_efficiently
  motions_attached
  motion_to_shorten_time_order = True
---
id: precheck_items
code: |
  interrogatories.precheck_items(limit=24)
  document_requests.precheck_items(limit=None)
  precheck_items = True
---
## other parties
id: plaintiffs
code: | 
  other_parties[i].name.first
  other_parties[i].attorney.gather()
  other_parties[i].complete = True
---
## other party's attorneys
id: plaintiffs attorney
code: |
  other_parties[i].attorney[0].name.first
  other_parties[i].attorney.complete = True
---

sets: old_judgment_warning
id: soft exit old judgment
decoration: hand
question: |
  % if person_answering == "tenant":
  You may not want to {file} an {answer}
  % else: 
  The tenant may not want to {file} an {answer}
  % endif
subquestion: |
  % if person_answering == "tenant":
  You said that the final judgment date was $( judgment_date }, which was more than a year ago.  Although you may still be able to set aside the judgment, you should talk to a lawyer because it is more complicated.
  % else: 
    You said that the final judgment date was $( judgment_date }, which was more than a year ago.  Although the tenant may still be able to set aside the judgment, the tenant should talk to a lawyer because it is more complicated.
  % endif
  
buttons:
  - ${"I understand, let me keep going" if person_answering == "tenant" else "The tenant understands, let them keep going"}:
      code: |
        old_judgment_warning = True
  - Exit: exit
    url: https://motenanthelp.org/
---
id: soft exit posting eviction
sets: posting_warning
decoration: hand
question: |
  % if person_answering == "tenant":
  You may not want to {file} an {answer}
  % else: 
  The tenant may not want to {file} an {answer}
  % endif
subquestion: |
  % if person_answering == "tenant":
  You said that
  % if tenant_got_summons is None:
  you do not know if you received the {Summons} and {Petition}.
  % elif not tenant_got_summons:
  you did not receive the {Summons} and {Petition} at all.
  % else:
  you got the {Summons} and {Petition} in the following ways:
  % for method in method_of_summons_service.true_values():
  
   - ${ method_of_summons_service_text[method] }  
  % endfor
  % endif
  
  In order to serve a tenant personally a landlord must:
  
   - Have the sheriff or a process server hand the tenant the summons and petition; OR
   - Send the summons and petition to the tenant through regular or certified mail and post the summons and petition at the tenant's door.
  
  If your landlord did not serve you personally, the landlord cannot sue you for money damages.  If you file an answer, the court may order 
  you to pay money that you would not need to pay otherwise.

  You may still want to keep going if you:

  * Want to find out if you have a defense that can stop the eviction, or
  * Think your landlord will owe you more money than you owe them.

  You do not need to decide now. If you keep going, we will remind you about your choices at the end.
  You may want to talk to a lawyer to decide for sure.
  % else: 
  % if tenant_got_summons is None:
  The tenant does not know if the tenant received the Summons and Petition at all.
  % elif not tenant_got_summons:
  The tenant did not receive the Summons and Petition at all.
  % else:
  The tenant got the Summons and Petition in the following ways:
  % for method in method_of_summons_service.true_values():
  
   - ${ method_of_summons_service_text[method] }
    
  % endfor
  % endif

  In order to serve a tenant personally a landlord must:
  
   - Have the sheriff or a process server hand the tenant the summons and petition; OR
   - Send the summons and petition to the tenant through regular or certified mail and post the summons and petition at the tenant's door.
  
  If the landlord did not serve the tenant personally, the landlord cannot sue the tenant for money damages.  If the tenant files an answer, the court may order 
  the tenant to pay money that the tenant would not need to pay otherwise.

  The tenant may still want to keep going if they:

  * Want to find out if they have a defense that can stop their eviction, or
  * Think their landlord will owe them more money than they owe the landlord.

  The tenant does not need to decide now. If they keep going, we will remind them about their choices at the end.
  The tenant may want to talk to a lawyer to decide for sure.
  % endif
buttons:
  - ${"I understand, let me keep going" if person_answering == "tenant" else "The tenant understands, let them keep going"}:
      code: |
        posting_warning = True
  - Exit: exit
    url: https://motenanthelp.org/
---
id: yep file an answer
question: |
  % if person_answering == "tenant":
  Tenants in your situation usually {file} an {answer}
  % else: 
  Tenants in this situation usually {file} an {answer}
  % endif
subquestion: |
  % if person_answering == "tenant":
  % if tenant_got_summons:
  You said that you got the {Summons} and {Petition} by 
  % if method_of_summons_service['sheriff']:
  personal delivery.
  % elif method_of_summons_service['certified_mail']:
  certified mail.
  % elif method_of_summons_service['posting'] and method_of_summons_service['mail']:
  mail and posting.
  % endif
  
  In your situation, most tenants file an answer.  An answer is a document that you file with the court to respond to the landlord's petition.  You can explain why you shouldn't be evicted in an answer.
  % else:
  You said you do not know if you got the {Summons} and {Petition}.  You should try to find out if you received the Summons and Petition to determine whether you should file an Answer.  An Answer makes it easier to defend against an eviction, but if you file an Answer in a case where you were not served the Summons and Petition, you could end up owing the landlord money.
  % endif

  Filing an answer may:

  * Stop your {eviction}, or
  * Lower the amount that you need to pay your landlord, or
  * both.

  The rest of the questions on this website will complete your
  answer.
  
  % else:
  % if tenant_got_summons:
  You said that the tenant got the {Summons} and {Petition} by
  % if method_of_summons_service['sheriff']:
  personal delivery.
  % elif method_of_summons_service['certified_mail']:
  certified mail.
  % elif method_of_summons_service['posting'] and method_of_summons_service['mail']:
  mail and posting.
  % endif
  
  % else:
  You said the tenant does not know if they got the {Summons} and {Petition}.
  % endif
  In this situation,
  most tenants file an answer.  An answer is a document that the tenant files with the court to respond to the landlord's petition.  The tenant can explain why the tenant shouldn't be evicted in an answer.

  Filing an answer may:

  * Stop the tenant's {eviction}, or
  * Lower the amount that the tenant needs to pay their landlord, or
  * both.

  The rest of the questions on this website will complete the tenant's
  answer.
  % endif
continue button field: recommend_filing_answer
---
id: landlord problems section order
code: |
  if warranty_breaches.any_true():
    notice_of_breach_to_landlord
  cqe_breaches
  estoppel_breaches
  landlord_problems_section = True

---
### not changing "you" reference language on this question because it appears before selection of person_answering
id: basic questions intro screen
decoration: form-lineal
question: |
  Answer and defend against an {eviction}: Missouri Tenant Help
subquestion: |
  Missouri Tenant Help can help you complete and download forms in 3 steps:

  
  Step 1. Answer the questions that are asked.  
  
  Step 2. Preview the completed forms.  
  
  % if form_approved_for_email_filing:  
  Step 3. Email the forms to the court using this secure website and save copies
  for yourself for later reference.  
  % elif al_form_type in ['starts_case','existing_case','appeal']:
  Step 3. Download and print the final forms. **You will need to deliver the forms
  to the court on your own.**
  % else:
  Step 3. Download and print the final forms. **You will need to deliver the forms 
  on your own.**
  % endif
  
  This site is not a {attorney|lawyer}. If you would like a lawyer, find [a Missouri legal aid provider](https://www.lsmo.org/).  If you are outside Missouri, find your [your local
  legal aid provider](https://www.lsc.gov/what-legal-aid/find-legal-aid).
  
  Tap the {green words} in any screen for a definition or more information.
  
  You can also click an underlined link with a triangle next to it to see more information.
  ${ collapse_template(collapsible_info_template) }
 
  % if chat_partners_available().help:
  Live help is currently available in this interview. Click the speech bubble
  (:comment-alt:) in the navigation bar to connect to a live advocate for help.
  % endif
  
  ${ display_template(about_page_contents, scrollable=True, collapse=True) }
fields:
  - To continue, you must accept the terms of use: acknowledged_information_use
    datatype: checkboxes
    none of the above: False    
    minlength: 1
    choices:
      - I accept the terms of use.
    validation messages:
      minlength: |
        You cannot continue unless you agree to the terms of use.
continue button field: al_intro_screen
---
id: you can do it affirmation
question: |
  ${ users[0].familiar() }, you can do this!
subquestion: |
  It takes most people about **30 minutes** to use this website. But you can 
  save your work and come back at any time.

  Just answer the questions on each screen as well as you can. Make sure
  to tell the truth.

  At the end you will have customized documents, ready to {file} in court.
continue button field: greet_user
---
id: how to answer
decoration: info-circle
question: |
  About this interview
subquestion: |
  **What's this about?**: This is a place to tell your side of the story about you, 
  your landlord, and why they want to evict you.

  Your answers complete your **{answer|Eviction Answer}** form and any other forms that you need.
  You will need to **print** and **deliver**
  the forms to the court on your own.

  <h2 class="h4">What to do</h2>

  1. Be honest and give full answers.
  1. Put a check next to things that are true, even if they don't seem related.
  1. If you are not sure, it's okay to skip a question. Giving some answers is 
    better than none.
  1. Sometimes, you might want to look up an answer. That's okay! But looking up some 
    things can take time and might be tricky. If you can't find the answer, or it's taking 
    too long, it's okay to leave the question blank.
  4. Filling this out doesn't stop talks with your landlord. It might help you both
     agree about what is fair.

  <h2 class="h4">What documents to find now</h2>

  Before you start, try to find these documents from the court and your landlord:

  1. The {Summons} from the court
  1. The Landlord's {petition}
  1. The eviction {notice}
  1. Your {lease}

  If you can't find a document, it is okay to keep going. Just do your best to answer
  the questions from what you remember.
continue button field: eviction_defender_intro
buttons:
  - I agree: continue
---
id: case type kickout for answer
only sets: case_type_kickout
code: |
  if not case_type["AC Rent and Possession"] and not case_type["AC Landlord Action (Bulk)"]:
    if unlawful_detainer_kick_out_option:
      motion_to_continue_order
  case_type_kickout = True
---
id: petition review order

code: |
  docket_number
  filing_date
  petition_date
  for party in other_parties:
    party.address.address
    party.attorney.gather()
  users.gather()
  petition_states_rent_amount
  if not lease_attached:
    petition_states_terms_of_lease
  petition_states_rent_periods
  petition_states_demand_made
  petition_review = True
comment: |
  This block doesn't appear to be used.
  
  filing_date
  is_rent_sought
  petition_requirements
  petition_review = True
---
id: add motion to continue if hearing not in the past
depends on: original_hearing_date_past
code: |
  eviction_motion_to_continue_attachment.enabled = not original_hearing_date_past and not motion_to_set_aside_attachment.enabled
---
id: add motion for leave to file if hearing is in the past
depends on: original_hearing_date_past
code: |
  eviction_motion_for_leave_attachment.enabled = original_hearing_date_past and not motion_to_set_aside_attachment.enabled
---
id: add eviction discovery if wants discovery
code: |
  eviction_discovery_attachment.enabled = wants_discovery and not motion_to_set_aside_attachment.enabled
---
id: add motion to shorten time if wants discovery and hearing date in future
code: |
  motion_to_shorten_time_attachment.enabled = wants_discovery and not original_hearing_date_past
---
depends on:
  - final_judgment
  - judgment_date_more_than_one_year
code: |
  motion_to_set_aside_attachment.enabled = original_hearing_date_past and final_judgment and not judgment_date_more_than_one_year
---
question: Motion to Set Aside
subquestion: |
  You said that there has already been a final judgment.  In that case, filing a Motion to Set Aside Judgment is required before filing anything else.  
  
  Do you want to make a Motion to Set Aside Judgment as recommended or do you want to finish the Answer anyway?
field: motion_to_set_aside_judgment_order_exit
datatype: boolean
buttons:
  code: |
    [{'label': "Motion to Set Aside Judgment",
      'value': True,
      'css class': 'good',
      'color': 'success'},
     {'label': "Finish the eviction answer",
      'value': False,
      'css class': 'clueless',
      'color': 'danger'}]
---
only sets: motion_to_set_aside_exit
code: |
  petition_date 
  supporting_statement
  wants_discovery = False
  document_order = True
  motion_to_set_aside_exit = True
---
id: add motion to dismiss if no lease
code: |
  motion_to_dismiss_attachment.enabled = not motion_to_set_aside_attachment.enabled and defense_lease_not_attached
---
id: add notice of hearing if any motions enabled
code: |
  notice_of_hearing_attachment.enabled = motion_to_shorten_time_attachment.enabled or eviction_motion_for_leave_attachment.enabled or eviction_motion_to_continue_attachment.enabled or motion_to_set_aside_attachment.enabled
---
id: motions for hearing
code: |
  motions_for_hearing_temp = list()
  if motion_to_shorten_time_attachment.enabled and "Motion to Shorten Time" not in motions_for_hearing_temp:
    motions_for_hearing_temp.append("Motion to Shorten Time")
  if eviction_motion_for_leave_attachment.enabled and "Motion for Leave to File Responsive Pleadings" not in motions_for_hearing_temp:
    motions_for_hearing_temp.append("Motion for Leave to File Responsive Pleadings")
  if eviction_motion_to_continue_attachment.enabled and "Motion to Continue" not in motions_for_hearing_temp:
    motions_for_hearing_temp.append("Motion to Continue")
  motions_for_hearing = motions_for_hearing_temp
---
id: motions for hearing
code: |
  motions_for_hearing_temp = list()
  if motion_to_shorten_time_attachment.enabled and "Motion to Shorten Time" not in motions_for_hearing_temp:
    motions_for_hearing_temp.append("Motion to Shorten Time")
  if eviction_motion_for_leave_attachment.enabled and "Motion for Leave to File Responsive Pleadings" not in motions_for_hearing_temp:
    motions_for_hearing_temp.append("Motion for Leave to File Responsive Pleadings")
  if eviction_motion_to_continue_attachment.enabled and "Motion to Continue" not in motions_for_hearing_temp:
    motions_for_hearing_temp.append("Motion to Continue")
  motions_attached = motions_for_hearing_temp
---
id: assembled_documents
code: |
  assembled_documents_temp = list()
  if "Answer" not in assembled_documents_temp:
    assembled_documents_temp.append("Answer")
  if "Instructions" not in assembled_documents_temp:
    assembled_documents_temp.append("Instructions")
  if eviction_motion_to_continue_attachment.enabled and "Motion to Continue" not in assembled_documents_temp:
    assembled_documents_temp.append("Motion to Continue")
  if eviction_motion_for_leave_attachment.enabled and "Motion for Leave" not in assembled_documents_temp:
    assembled_documents_temp.append("Motion for Leave")
  if eviction_discovery_attachment.enabled and "Discovery" not in assembled_documents_temp:
    assembled_documents_temp.append("Discovery")
  if motion_to_shorten_time_attachment.enabled and "Motion to Shorten Time" not in assembled_documents_temp:
    assembled_documents_temp.append("Motion to Shorten Time")
  if motion_to_set_aside_attachment.enabled and "Motion to Set Aside Judgment" not in assembled_documents_temp:
    assembled_documents_temp.append("Motion to Set Aside Judgment")
  assembled_documents = assembled_documents_temp
---
id: eviction answer determination code
code: |
  # We now handle unlawful detainer cases
  eviction_answer_attachment.enabled = not motion_to_set_aside_attachment.enabled
---
id: signpost claims and defenses section
decoration: user-shield
question: |
  Claims and defenses
subquestion: |
  This section will ask about any {defense|defenses} to the {eviction}
  and any {counterclaim|counterclaims} against the landlord.
  
continue button field: signpost_claims_and_defenses
---
id: do you agree with the landlord
question: |
  Landlord's reason for eviction
subquestion: |
  % if person_answering == "tenant":
  Your landlord says that they are evicting you because:
  % else:
  The landlord says that they are evicting the tenant because:
  % endif

  % for reason in eviction_reason.true_values():
   - ${ reason }
  % endfor

  % if person_answering == "tenant":
  Do you agree with your landlord's reason for eviction, or do you deny it?

  If at least **one** of the reasons or facts that the landlord
  claims about you is not true, you should deny the landlord's reason for eviction.
  % else:
  Does the tenant agree with the landlord's reason for eviction?

  If at least **one** of the reasons or facts that the landlord
  claims about the tenant is not true, you should deny the landlord's reason for eviction.
  % endif  
fields:
  - label: |
      % if person_answering == "tenant":
      I deny doing what the landlord says that I did.
      % else:
      The tenant denies doing what the landlord says that they did.
      % endif
    field: defense_no_breach
    datatype: yesnoradio
  - label: |
      % if person_answering == "tenant":
      Even if what the landlord says happened is true, I deny that the reason the landlord gave is a good enough reason
      to evict me.
      % else:
      Even if what the landlord says happened is true, the tenant denies that the reason the landlord gave is a good enough reason
      to evict them.
      % endif
    field: defense_breach_not_material
    datatype: yesnoradio
---
id: next steps explanation
question:  Print, Sign, Serve and File
---
code: |
  show_all_defenses = True
---
