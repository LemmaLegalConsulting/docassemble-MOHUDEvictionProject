---
include:
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.ALAnyState:any_state.yml
  - defense_logic.yml
  - information_collected.yml
  - al_reminders.yml
  - docassemble.ALToolbox:display_template.yml
  - court_information.yml
---
metadata:
  title: |
    Defend Against An Eviction
  short title: |
    Eviction Defense
  title url: |
    https://motenantassistance.org/
  tags:
    - HO-02-00-00-00
  authors:
    - Quinten Steenhuis
    - Toby Fey
    - Ian Eisaman
    - Mia Bonardi
---
features:
  bootstrap theme: lsem.bootstrap.css    
---
default screen parts:
  pre: |
---
mandatory: True
comment: |
  Global interview metadata
variable name: interview_metadata["eviction_defender"]
data:
  al_weaver_version: "1.7.0"
  generated on: "2022-09-08"
  title: >-
    Eviction Helper
  short title: >-
    Eviction Help
  description: |-
    Helps with Evictions
  original_form: >-
    
  allowed courts: 
    - "Missouri"
  categories:
    - "HO-00-00-00-00"
  typical role: "defendant"
  generate download screen: True
---
code: |
  interview_metadata['main_interview_key'] =  'eviction_defender'
---
code: |
  # This controls the default country and list of states in address field questions
  AL_DEFAULT_COUNTRY = "US"
---
code: |
  # This controls the default state in address field questions
  AL_DEFAULT_STATE = "MO"
---
code: |
  github_repo_name =  'docassemble-MOHUDEvictionProject'
---
code: |
  interview_short_title = "Eviction Defender"
---
code: |
  al_form_type = "existing_case" 
---
code: |
  AL_ORGANIZATION_TITLE = "Missouri Tenant Help"
---
code: |
  AL_ORGANIZATION_HOMEPAGE = "https://motenantassistance.org/"
---
code: |
  user_started_case = False
---
code: |
  landlord_doc_name = "Plaintiff"
---
code: |
  tenant_doc_name = "Defendant"
---
objects:
  - al_logo: DAStaticFile.using(filename="logo.svg")
---
objects:
  - other_parties: ALPeopleList.using(there_are_any=True,complete_attribute="complete")
  - other_parties[i].attorney: ALPeopleList.using(complete_attribute="complete")
  - users[i].attorney: ALPeopleList.using(ask_number=True)
  - users: ALPeopleList.using(there_are_any=True)
  - offer_attempts: DAList.using(object_type=DAObject, complete_attribute="attempt_date")
---
sections:
  - section_eviction_answer_intro: Introduction
  - section_eviction_answer_can_i: Should you file an Answer?
  - section_eviction_answer_you: Information about you
  - section_eviction_answer_other: Information about the other party
  - section_eviction_answer_tenancy: Information about your rental agreement
  - section_eviction_answer_case: Information about the eviction
  - section_eviction_answer_casenet: Using Case.net
  - section_eviction_answer_defenses: Your claims and defenses
  - review_eviction_answer: Review your answers
  - section_serve_other_side: Getting a copy to your landlord
  - section_eviction_answer_download: Download, print and file
---
###################### Main order ######################
mandatory: True
code: |
  al_intro_screen
  eviction_defender_intro
  interview_order_eviction_defender
  signature_date
  nav.set_section("section_serve_other_side")
  if other_parties[0].service_method == "email":
    other_parties[0].service_email
  elif other_parties[0].service_method in ["mail", "hand"]:
    if other_parties[0].attorney.there_are_any:
      other_parties[0].attorney[0].address.address
    other_parties[0].service_address
  # Store anonymous data for analytics / statistics
  nav.set_section("review_eviction_answer")
  review_eviction_answer
  al_user_wants_reminders
  store_variables_snapshot(
      persistent=True,
      data={
          "zip": showifdef("users[0].address.zip"),
          "reached_interview_end": True,
      },
  )
  nav.set_section("section_eviction_answer_download")
  eviction_defender_download
---
#################### Interview order #####################
comment: |
  Controls order and branching logic for questions specific to this form
id: interview_order_eviction
code: |
  # Set the allowed courts for this interview
  allowed_courts = interview_metadata["eviction_defender"]["allowed courts"]
  nav.set_section('section_eviction_answer_intro')
  user_role = 'defendant'
  landlord_doc_name
  tenant_doc_name
  users[0].name.first
  if person_answering == "tenant":
    greet_user
    users[0].attorney.target_number = 0
  elif person_answering == "attorney" and representation_type == "entering_appearance":
    users[0].attorney.target_number = 1
    users[0].attorney[0].name.first
    users[0].attorney[0].address.address
  else:
    users[0].attorney.target_number = 0
  nav.set_section("section_eviction_answer_can_i")
  if not tenant_got_summons or not method_of_summons_service['sheriff']:
    posting_warning
  else:
    recommend_filing_answer
  nav.set_section("section_eviction_answer_you")
  users[0].address.address
  users[0].address.geocode()
  trial_court.county
  trial_court.circuit
  if not tenant_got_summons or not petition_available:
    if not trial_court.county == None and docket_available:
      docket_review
  if not case_type["AC Rent and Possession"] and not case_type["AC Landlord Action (Bulk)"]:
    if unlawful_detainer_kick_out_option:
      motion_to_continue_order
      interview_order_eviction_defender = True
  nav.set_section("section_eviction_answer_other")
  other_parties.gather()
  for party in other_parties:
    party.address.address
    party.attorney.gather()
  nav.set_section("section_eviction_answer_tenancy")  
  is_rent_subsidized
  lease_section
  if previous_landlord_sold_property:
    notice_of_sale_provided_new_landlord
  if landlord_foreclosed:
    notice_of_foreclosure
  nav.set_section("section_eviction_answer_casenet")
  if not trial_court.county == None and docket_available:
    docket_review
  nav.set_section("section_eviction_answer_case")
  original_hearing_date
  docket_number
  users.gather()
  petition_states_rent_amount
  nav.set_section("section_eviction_answer_defenses")
  landlord_agreement_section
  rent_defenses_section
  defense_logic
  landlord_problems_section
  set_progress(50)
  information_collected
  interview_order_eviction_defender = True
---
#################### Interview order #####################
comment: |
  Controls order and branching logic for questions specific to this form
id: interview_order_eviction_motion_to_continue
code: |
  # Set the allowed courts for this interview
  allowed_courts = interview_metadata["eviction_defender"]["allowed courts"]
  nav.set_section('section_eviction_answer_intro')
  user_role = 'defendant'
  landlord_doc_name
  tenant_doc_name
  users[0].name.first
  greet_user
  nav.set_section("section_eviction_answer_can_i")
  if not tenant_got_summons or not method_of_summons_service["sheriff"]:
    posting_warning
  else:
    recommend_filing_answer
  nav.set_section("section_eviction_answer_you")
  users[0].address.address
  users[0].address.geocode()
  nav.set_section("section_eviction_answer_other")
  other_parties.gather()
  for party in other_parties:
    party.address.address
    party.attorney.gather()
  nav.set_section("section_eviction_answer_casenet")
  if not trial_court.county == None and docket_available:
    docket_review
  nav.set_section("section_eviction_answer_case")
  original_hearing_date
  docket_number
  users.gather()
  set_progress(50)
  motion_to_continue_order = True
---
id: who is using this interview
question: |
  Who is using this website?
fields:
  - I am: person_answering
    datatype: radio
    choices:
      - The tenant: tenant
      - An attorney: attorney
      - Someone **else** helping a tenant: tenant_helper
  - Will you file an appearance?: representation_type
    input type: radio
    choices:
      - Yes. I am entering an appearance.: entering_appearance
      - No. I am only helping "ghostwrite" this document.: ghostwriting
    show if:
      variable: person_answering
      is: attorney
  - note: |
      **Okay. The court documents will state "Prepared with assistance of counsel" in the footer.**
    show if:
      variable: representation_type
      is: ghostwriting
---
id: your name
question:  |
  % if person_answering == "tenant":
  Your name
  % else:
  Tenant's name
  % endif
fields:
  - First: users[0].name.first
  - Middle: users[0].name.middle
    required: False
  - Last: users[0].name.last
  - Suffix: users[0].name.suffix
    code: |
      name_suffix()
    required: False
---
id: name of the first person
sets:
  - users[0].attorney[0].name.first
  - users[0].attorney[0].name.last
  - users[0].attorney[0].name.middle
  - users[0].attorney[0].name.suffix
question: |
  Your name (as the attorney signing the pleading)
fields:
  - code: |
      users[0].attorney[0].name_fields()
---
sets:
  - users[0].attorney[0].address.address
  - users[0].attorney[0].address.city
  - users[0].attorney[0].address.zip
  - users[0].attorney[0].address.unit
  - users[0].attorney[0].address.state
  - users[0].attorney[0].address.country
id: persons address
generic object: ALIndividual
question: |
  What is your address for the pleading?
fields:
  - code: |
      users[0].attorney[0].address_fields(country_code=AL_DEFAULT_COUNTRY, default_state=AL_DEFAULT_STATE)
---
code: |
  other_parties[i].name.first
  other_parties[i].person_type
  other_parties[i].attorney.gather()
  other_parties[i].complete = True
---
code: |
  other_parties[i].attorney[j].name.first
  other_parties[i].attorney[j].complete = True
---
code: |
  other_parties[i].attorney.there_is_another = False
---
id: any other opposing parties
question: |
  Is there another **Plaintiff** in this eviction case?
subquestion:  |
  % if person_answering == "tenant":
  You have already told us about ${ other_parties.complete_elements() }.

  If you have the Summons and Petition, the name of each Plaintiff is listed
  in the box labeled "Plaintiff". 
  % else:
  We know about ${ other_parties.complete_elements() }.

  The name of each Plaintiff is listed on the Summons and Petition
  in the box labeled "Plaintiff". 
  % endif
fields:
  - Is there another Plaintiff?: other_parties.there_is_another
    datatype: yesnomaybe
#---
#question: Other information about your landlord
#subquestion: |
#  Now we are going to ask you some other questions about your landlord.  Please answer these questions to the best of your ability.
#continue button field: other_landlord_information
---
code: |
  if not lease_attached:
    petition_states_terms_of_lease
  if len(false_promises):
    relied_on_false_promises
  unfair_duress
  lease_section = True
---
code: |
  petition_states_rent_amount
  petition_states_rent_periods
  was_rent_paid
  will_offer_payment
  offer_attempts.gather()
  if is_rent_subsidized:
    excessive_rent
  if late_fees_assessed:
    late_fees_penalty
    if trial_court.circuit == 21:
      petition_separates_nonrent
  petition_states_demand_made
  rent_defenses_section = True
---
code: |
  if landlord_agreement:
    tenant_compliance_with_agreement
  landlord_agreement_section = True
---
code: |
  warranty_breaches
  estoppel_breaches
  cqe_breaches
  landlord_problems_section = True

---
### not changing "you" reference language on this question because it appears before selection of person_answering
id: basic questions intro screen
decoration: form-lineal
question: |
  Answer and defend against an eviction: Missouri Tenant Help
subquestion: |
  Missouri Tenant Help can help you complete and download forms in 3 steps:

  
  Step 1. Answer questions that will fill in your form for you.  
  Step 2. Preview the completed form.  
  % if form_approved_for_email_filing:  
  Step 3. Email the form to the court using this secure website and save copies
  for yourself for later reference.  
  % elif al_form_type in ['starts_case','existing_case','appeal']:
  Step 3. Download and print the final form. You will need to deliver it
  to the court on your own.
  % else:
  Step 3. Download and print the final form. You will need to deliver it 
  on your own.
  % endif
  
  This site is not a lawyer. If you would like a lawyer, find [a Missouri legal aid provider](https://www.lsmo.org/).  If you are outside Missouri, find your [your local
  legal aid provider](https://www.lsc.gov/what-legal-aid/find-legal-aid).
  
  Tap the {green words} in any screen for a definition or more information.
  
  % if chat_partners_available().help:
  Live help is currently available in this interview. Click the speech bubble
  (:comment-alt:) in the navigation bar to connect to a live advocate for help.
  % endif
  
  ${ display_template(about_page_contents, scrollable=True, collapse=True) }
fields:
  - To continue, you must accept the terms of use: acknowledged_information_use
    datatype: checkboxes
    none of the above: False    
    minlength: 1
    choices:
      - I accept the terms of use.
    validation messages:
      minlength: |
        You cannot continue unless you agree to the terms of use.
continue button field: al_intro_screen
terms:
  green words: |
    Green words are legal terms or a short way of referring to something that needs more explanation. The definition or explanation pops up when you tap the green words.
---
template: about_page_contents
subject: Terms of Use and Privacy Policy
content: |
  This website is free to use. Legal Services of Eastern Missouri (“LSEM”), a nonprofit legal aid program, hosts the site.
  <h3 class="h5">You need to know</h3>
  * **This website does not provide legal advice**. If you need legal advice, you can use [https://www.lsmo.org/](https://www.lsmo.org/) to find a lawyer.
  * The information and documents on this website have no warranty. We provide the information “as-is.” By using the site, you agree not to hold GBLS or the information providers on this site liable.
  * We work hard to keep the information on the site up to date. Lawyers drafted and reviewed the documents this site uses. But laws and local rules change over time. These changes can make a document unenforceable when you use it.
  * We do our best to keep the site working! To do that, we allow you to submit feedback so we can track problems on the site. But we cannot provide individual technical support.
  <h3 class="h5">To use this site</h3>
  * You need to be over 13 to use this site.
  * This site is for **anyone** 13 and over. For example: you can be the person who needs the help, a lawyer, or a social worker.
  * You may not sell the information or the contents of this site. But you can charge for your own time.
  * Please keep your use fair. Do not use this site in a way that is illegal or that makes it harder for other people to use.
  <h3 class="h5">Information we and others collect</h3>
  * We collect the information that you type to help you complete your forms. We delete all information 180 days after you last update it. You can also delete information immediately.
  * We log information including IP addresses and web browsers from all visitors. We use this information to keep our site secure. We keep logs for up to 180 days.
  * We use Google Maps to help fill in addresses automatically. This feature sends your IP address to Google Maps to get your approximate location.
  * We use Google Analytics to learn how people use our website. This helps us understand which pages are hardest to use. Google may use this information to show you better advertisements.
  * We use email and text message delivery services that may keep their own records of any messages you send. If you choose to log in with your phone number, this may include a record of the times you log in to the site.
  <h3 class="h5">We keep your information safe</h3>
  * We use the same technology that banks and online stores use to keep your information safe. We use:
  * 256 bit encryption
  * Software firewalls
  * Limited access controls
  * Continual monitoring
  * Regular security updates
  <h3 class="h5">Sharing your information</h3>
  * We never sell your information.
  * We share anonymous information with a small number of nonprofits and researchers. We use the information to improve our site and to improve free legal help in Missouri.
  * When you visit some pages of the site, the site may ask if you want to apply to get a free lawyer from legal aid. You get to decide if you want to share your personal information.
  * You may choose to email completed forms or share a link to your in-progress work at any time to any person.
  <h3 class="h5">These terms of use can change</h3>
  We may change these Terms of Use at any time with no notice. Please review the terms on a regular basis to see any changes.
  If you use the site after we make changes, you accept our changed Terms of Use.
  <h3 class="h5">The laws of Missouri apply to these Terms of Use</h3>
  If a judge decides that one of the terms in this Terms of Use is unenforceable, it will not change the terms that remain.
  <h3 class="h5">If you still have questions</h3>
  Send any questions to:
  Legal Services of Eastern Missouri
  701 Market Street, Suite 1100
  St. Louis, MO 63101
---
### not changing "you" reference language on this question because it appears before selection of person_answering
id: eviction_defender_introduction
continue button field: eviction_defender_intro
question: |
  Defend against an Eviction
subquestion: |
  <h2 class="h4">How this works</h2>
  On the next screens you will tell us:

  1. About your eviction case.
  1. Why you should not be evicted.
  1. About problems in your home and in your landlord's case that may
     stop your eviction.

  At the end of the questions, you will have completed documents that you
  need to deliver to your landlord and to the court. The documents make up
  your "Answer" and motions for your eviction case.

  <h2 class="h4">Before you start</h2>
  1. Get ready to print and deliver these documents. We can help you
     fill in the documents, but you need to deliver them on your own.
  1. Do your best to find any documents from the court and your landlord about the eviction, including:
  
      - The Summons from the court
      - The Landlord's petition
      - The eviction notice
      - Your lease
  
  **Currently, we can only help when your landlord is evicting you because you have not paid your rent.**  This type of eviction is called a Rent and Possession case.  If you are being evicted for another reason, contact [a Missouri legal aid provider](https://www.lsmo.org/).
---
id: you can do it affirmation
question: |
  ${ users[0].familiar() }, you can do this!
subquestion: |
  It takes most people about **30 minutes** to use this website. But you can 
  save your work and come back at any time.

  Just answer the questions on each screen as well as you can. Make sure
  to tell the truth.

  At the end you will have customized documents, ready to file in court.
continue button field: greet_user
---
id: your address
sets:
  - users[0].address.address
  - users[0].address.city
  - users[0].address.zip
  - users[0].address.unit
  - users[0].address.state
  - users[0].address.country
question: |
  % if person_answering == "tenant":
  Where do you live?
  % else:
  Where does the tenant live?
  % endif
subquestion: |
  % if person_answering == "tenant":
  Write the address that you are being evicted from.
  % else:
  Write the address that the tenant is being evicted from.
  % endif
fields:
  - code: |
      users[0].address_fields(country_code=AL_DEFAULT_COUNTRY, default_state=AL_DEFAULT_STATE)
validation code: |
  if users[0].address.state != "MO":
    validation_error("Write an address that you are being evicted from in Missouri", field="users[0].address.state")
---
###################### DOCKET REVIEW ######################
id: Docket_introduction
question: |
  % if person_answering == "tenant":
  Use Case.net to lookup your case
  % else:
  Use Case.net to lookup the tenant's case
  % endif
subquestion: |
  % if person_answering == "tenant":
  You can use [Case.net](https://www.courts.mo.gov/cnet)
  to help answer some questions on this website.

  Case.net is a free website run by the Missouri Court. You do not need an
  account to access Case.net.

  Using Case.net is optional, but it can help you answer the questions more
  accurately.    

  You will need both this website and the Case.net website open at the same time. You will
  need to switch back and forth between the two websites.
  % else:
  The tenant may use [Case.net](https://www.courts.mo.gov/cnet)
  to help answer some questions on this website.

  Case.net is a free website run by the Missouri Court. No
  account is needed to access Case.net.

  Using Case.net is optional, but it can help the tenant answer the questions more
  accurately.    

  This website and the Case.net website will need to be open at the same time. Switch back and forth between the two websites.
  % endif
fields:
  - label: |
      % if person_answering == "tenant":
      Do you want to use Case.net to help answer some questions?
      % else:
      Does the tenant want to use Case.net to help answer some questions?
      % endif
    field: docket_available
    datatype: yesnoradio
---
if: trial_court.county == None
code: |
  docket_available = False
---
depends on:
  - users[0].address.county
  - users[0].name.first
code: |
  import urllib
  url = 'https://www.courts.mo.gov/cnet/nameSearchResult.do?'
  params = {
    "courtType": "SW",
    "newSearch": "Y",
    "essn": "",
    "courtCode": "SW",
    "lastName": users[0].name.last,
    "_inclAlias": "on",
    "firstName": users[0].name.first,
    "middleName": "",
    "caseType": "All",
    "yearFiled": "",
  }
  if users[0].normalized_address().city == "St. Louis":
    params["countyCode"] = "STL"
  else:
    params["countyCode"] = county_dictionary[trial_court.county]['casenet_code']
  formatted_casenet_url = f"{url}{urllib.parse.urlencode(params)}"
---
id: how to login to Case net
question: |
  Getting started with Case.net
subquestion: |
  To answer the questions on the next few screens, you need to:

  1. Open the [Case.net](https://www.courts.mo.gov/cnet) website in a new tab.
  1. Use the case lookup feature to find your eviction case.

  You will need both this website and the Case.net website open at the same time. You will
  need to switch back and forth between the two windows.

  <h2 class="h4">Before you start, read these instructions</h2>
  Use the button below to open Case.net website with your address and court
  already filled in.

  Look for your eviction case. Click the link with the case number for your case
  to see the details about your case. If you do not see your case, try a different
  search.

  ${ action_button_html(formatted_casenet_url, label="Search Case.net in a new window", icon="up-right-from-square") }
continue button field: casenet_login_instructions  
---
id: docket review order
code: |
  casenet_login_instructions
  if not case_type["AC Rent and Possession"] and not case_type["AC Landlord Action (Bulk)"]:
    if unlawful_detainer_kick_out_option:
      motion_to_continue_order
      docket_review = True
  for party in other_parties:
    party.address.address
    party.attorney.gather()
  users.gather()
  original_hearing_date
  set_parts(subtitle=str(users))
  docket_review_conclusion
  docket_review = True
comment: |
  filing_date
  original_hearing_date
  other_parties[0].address.address
  trial_court.address.address
  users.gather()
  set_parts(subtitle=str(users))
  docket_number
  is_rent_sought
  docket_review = True
---
id: Information about the original hearing
question: |
  % if person_answering == "tenant":
  When is your court hearing?
  % else:
  When is the tenant's court hearing?
  % endif
subquestion: |
  % if person_answering == "tenant":
  The Summons will say the time and date of your original court hearing.
  % else:
  The Summons will say the time and date of the tenant's original court hearing.
  % endif
  
  [FILE MOSummonsCourtDate.png, 100%]
  
fields:
  - "Date of original hearing": original_hearing_date
    datatype: date
  - "Original hearing time": original_hearing_time
---
depends on: original_hearing_date
id: Calculating if hearing date is past
code: |
  original_hearing_date_past = original_hearing_date < today()
---
sets:
  - other_parties[i].name.first
  - other_parties[i].name.last
  - other_parties[i].name.middle
  - other_parties[i].name.suffix
  - other_parties[i].person_type
id: names of opposing parties - no petition or docket
question: |
  % if i >= 1:
  What is your ${ ordinal(i) } landlord's name?
  % else:
  What is your landlord's name?
  % endif 
fields:
  - code: |
      other_parties[i].name_fields(person_or_business='unsure')   
---
if: docket_available
sets:
  - other_parties[i].name.first
  - other_parties[i].name.last
  - other_parties[i].name.middle
  - other_parties[i].name.suffix
  - other_parties[i].person_type
id: names of opposing parties - docket only
question: |
  Name of Plaintiff
subquestion: |
  % if i == 0:
    You can click on "Parties & Attorneys", the next tab to the right.  This tab should look like this:
  
    [FILE Parties.png, 100%]
    
    Who is listed as the Plaintiff?
  % else:
    
    [FILE Parties.png, 100%]
  
    Another Plaintiff may be listed underneath the first Plaintiff.  Who is the  ${ ordinal(i) } Plaintiff?
  % endif
fields:
  - code: |
      other_parties[i].name_fields(person_or_business='unsure')    
---
id: names of opposing parties - petition
if: tenant_got_summons and petition_available
sets:
  - other_parties[i].name.first
  - other_parties[i].name.last
  - other_parties[i].name.middle
  - other_parties[i].name.suffix
  - other_parties[i].person_type
question: |
  % if i >= 1 and person_answering == "tenant":
  What is your ${ ordinal(i) } landlord's name?
  % elif i == 1 and person_answering == "tenant":
  What is your landlord's name?
  % elif i >= 1 and person_answering == "attorney" or person_answering == "tenant_helper":
  What is the tenant's ${ ordinal(i) } landlord's name?
  % elif i == 1 and person_answering == "attorney" or person_answering == "tenant_helper":
  What is the tenant's landlord's name?
  % endif
subquestion: |
  Look at the Summons and Petition, and write the name of the ${ ordinal(i) } "Plaintiff"
  exactly as it is written on the Summons and Petition.
  
  [FILE ComplaintCaptionPlaintiff.png, 100%]
  
fields:
  - code: |
      other_parties[i].name_fields(person_or_business='unsure')   
--- 
id: any hearings
question: |
  % if person_answering == "tenant":
  Has the court held any hearings on your eviction yet?
  % else:
  Has the court held any hearings on the tenant's eviction yet?
  % endif
subquestion: |
  % if person_answering == "tenant":
  Click the "Docket Entries" tab to see what has happened in your case so far.

  The "Docket Entries" tab has a list of events. Each event has a date, a name,
  and a few facts about what happened.
  
  If the court has not had a hearing for your case yet, the "Docket Entries"
  tab will **only** show an event named "Summons Issued - Landlord/Tenant", like this:
  % else:
  Click the "Docket Entries" tab to see what has happened in the tenant's case so far.

  The "Docket Entries" tab has a list of events. Each event has a date, a name,
  and a few facts about what happened.
  
  If the court has not had a hearing for the tenant's case yet, the "Docket Entries"
  tab will **only** show an event named "Summons Issued - Landlord/Tenant", like this:
  % endif
  
  [FILE Docket.png, 100%]  
fields:
  - label: |
      % if person_answering == "tenant":
      Has the court already had a hearing on your case?
      % else:
      Has the court already had a hearing on the tenant's case?
      % endif
    field: past_hearings
    datatype: yesnomaybe
---
id: eviction hearing date if docket available
if: docket_available
question: |
  % if person_answering == "tenant":
  When is your eviction hearing?
  % else:
  When is the tenant's eviction hearing?
  % endif
subquestion: |
  % if person_answering == "tenant":
  Click the "Scheduled Hearings and Trials" tab and find the
  date scheduled for your case.
  
  Your results may look like this:
  % else:
  Click the "Scheduled Hearings and Trials" tab and find the
  date scheduled for the tenant's case.
  
  The tenant's results may look like this:
  % endif

  [FILE ScheduledEvents.png, 100%]
fields:
  - "Date of hearing": original_hearing_date
    datatype: date
  - "Original hearing time": original_hearing_time
---
id: explain other case net uses
question: |
  Other information on Case.net
subquestion: |
  % if person_answering == "tenant":
  Keep a link to [Case.net](https://www.courts.mo.gov/cnet) so you can check it regularly.

  The court will mail you notices about important dates. But you may want to use Case.net
  to make sure you do not miss anything. You can use it to find:

  * Hearings that are scheduled
  * If the judge made a decision (judgment) in your case
  * If your landlord got a garnishment or execution to make you pay back rent
  * If your landlord got permission to move you from your home

  If you have an email address or cell phone, click the "Track this case" button to get
  an email or text message when important things happen in your case. You can also
  get a reminder both 10 days and 2 days before your court date.
  % else:
  Keep a link to [Case.net](https://www.courts.mo.gov/cnet) so the tenant can check it regularly.

  The court will mail the tenant notices about important dates. But the tenant may want to use Case.net
  to make sure they do not miss anything. The tenant can use it to find:

  * Hearings that are scheduled
  * If the judge made a decision (judgment) in their case
  * If their landlord got a garnishment or execution to make them pay back rent
  * If their landlord got permission to move them from their home

  If the tenant has an email address or cell phone, click the "Track this case" button to get
  an email or text message when important things happen in their case. They can also
  get a reminder both 10 days and 2 days before their court date.
  % endif
continue button field: docket_review_conclusion
---
sets: docket_number
id: docket number
question: |
  % if person_answering == "tenant":
  What is the case number for your case?
  % else: 
  What is the case number for the tenant's case?
  % endif
fields:
  - label: |
      % if person_answering == "tenant":
      I do not know the case number
      % else:
      The tenant does not know the case number
      % endif
    field: dont_know_docket_number
    datatype: yesnowide
  - no label: docket_number
    hide if: dont_know_docket_number
validation code: |
  # This should be safe to 
  if dont_know_docket_number:
    docket_number = ''      
---
###################### PETITION REVIEW ######################
id: Petition_introduction
mandatory: True
question: |
  % if person_answering == "tenant":
  Did you get a Summons and Landlord's Petition?
  % else:
  Did the tenant get a Summons and Landlord's Petition?
  % endif
subquestion: |
  The {Summons} will look like this:
 
  [CENTER]
  [FILE MOSummons.png]
 
  The {Petition} looks different in some counties, but it may look like this:
 
  [CENTER]
  [FILE ComplaintForm.png]
fields:
  - label: |
      % if person_answering == "tenant":
      I got a copy of the {Summons} and {Petition}
      % else:
      Did the tenant get a copy of the {Summons} and {Petition}?
      % endif
    field: tenant_got_summons
    datatype: yesnomaybe
  - label: |
      % if person_answering == "tenant":
      How did you get the Summons and Landlord's Petition?
      % else:
      How did the tenant get the Summons and Landlord's Petition?
      % endif
    field: method_of_summons_service
    datatype: checkboxes
    choices:
      - "By mail": mail
      - ${ "It was taped, stapled, or posted to your door or home" if person_answering == "tenant" else "It was taped, stapled, or posted to the tenant's door or home" }: posting
      - ${ "It was stuffed in the door or left somewhere without being taped, stapled or posted"}: left
      - ${ "It was handed to you by the sheriff" if person_answering == "tenant" else "It was handed to the tenant by the sheriff" }: sheriff
      - ${ "It was handed to you by your landlord or somebody other than the sheriff" if person_answering == "tenant" else "It was handed to the tenant by the landlord or somebody other than the sheriff" }: other_delivery
      - "Some other method of getting the petition": other
    none of the above: False
    show if: tenant_got_summons
  - label: |
      % if person_answering == "tenant":
      Do you have the Summons next to you now?
      % else:
      Does the tenant have the Summons next to them now?
      % endif
    field: petition_available
    datatype: yesnoradio
    show if: tenant_got_summons
  - note: |
      % if person_answering == "tenant":
      **You may want to stop and get the petition now.** It can help you answer
      the questions on this website more accurately. If you cannot easily get it,
      it is OK to keep going.
      % else: 
      **The tenant may want to stop and get the petition now.** It can help them answer
      the questions on this website more accurately. If they cannot easily get it,
      it is OK to keep going.
      % endif
    show if: 
      variable: petition_available
      is: False
terms:
  Summons: |
    % if person_answering == "tenant":
    The Summons is the form that the Court sends you to tell you 
    to attend a court hearing.
    % else: 
    The Summons is the form that the Court sends the tenant to 
    tell them to attend a court hearing.
    % endif
  Petition: |
    % if person_answering == "tenant":
    The Landlord's Petition is the form that your landlord must 
    file with the court to start an eviction case.
    % else: 
    The Landlord's Petition is the form that the tenant's 
    landlord must file with the court to start an eviction case.
    % endif
---
variable name: method_of_summons_service_text
use objects: True
data:
  mail:
    question: By mail
    document: By mail
  posting:
    question: |
      % if person_answering == "tenant":
      It was taped, stapled, or posted to your door or home
      % else:
      It was taped, stapled, or posted to the tenant's door or home
      % endif   
    document: |
      It was taped, stapled, or posted to the tenant's door or home   
  left:
    question: |
      It was stuffed in the door or left somewhere without being taped, stapled or posted  
    document: |
      It was stuffed in the door or left somewhere without being taped, stapled or posted
  sheriff:
    question: |
      % if person_answering == "tenant":
      It was handed to you by the sheriff
      % else:
      It was handed to the tenant by the sheriff
      % endif   
    document: |
      It was handed to the tenant by the sheriff
  other_delivery:
    question: |
      % if person_answering == "tenant":
      It was handed to you by your landlord or somebody other than the sheriff
      % else:
      It was handed to the tenant by the landlord or somebody other than the sheriff
      % endif   
    document: |
      It was handed to the tenant by the landlord or somebody other than the sheriff
  other:
    question: |
      Some other method of getting the petition
    document: |
      Some other method of getting the petition
---
sets: posting_warning
id: soft exit posting
decoration: hand
question: |
  % if person_answering == "tenant":
  You may not want to file an answer
  % else: 
  The tenant may not want to file an answer
  % endif
subquestion: |
  % if person_answering == "tenant":
  You said that you got the Summons and Petition by "posting" (taping, stapling, or pinning to your door) or that you did not receive the Summons and Petition at all.

  Because your landlord did not serve you personally, the landlord cannot sue you for money damages.  If you file an answer, the court may order 
  you to pay money that you would not need to pay otherwise.

  You may still want to keep going if you:

  * Want to find out if you have a defense that can stop the eviction, or
  * Think your landlord will owe you more money than you owe them.

  You do not need to decide now. If you keep going, we will remind you about your choices at the end.
  You may want to talk to a lawyer to decide for sure.
  % else: 
  The tenant got the Summons and Petition by "posting" (taping, stapling, or pinning to their door) or that they did not receive the Summons and Petition at all.

  Because their landlord did not mail the Summons and Petition, if they file an answer, the court may order 
  them to pay money that they would not need to pay otherwise.

  The tenant may still want to keep going if they:

  * Want to find out if they have a defense that can stop their eviction, or
  * Think their landlord will owe them more money then they owe the landlord.

  The tenant does not need to decide now. If they keep going, we will remind them about their choices at the end.
  The tenant may want to talk to a lawyer to decide for sure.
  % endif
buttons:
  - ${"I understand, let me keep going" if person_answering == "tenant" else "The tenant understands, let them keep going"}:
      code: |
        posting_warning = True
  - Exit: exit
    url: https://motenantassistance.org/
---
id: yep file an answer
question: |
  % if person_answering == "tenant":
  Tenants in your situation usually file an answer
  % else: 
  Tenants in this situation usually file an answer
  % endif
subquestion: |
  % if person_answering == "tenant":
  % if tenant_got_summons:
  You said that you got the Summons and Petition by personal delivery.
  % else:
  You said you do not know if you got the Summons and Petition.
  % endif
  In your situation,
  most tenants file an answer.

  Filing an answer may:

  * Stop your eviction, or
  * Lower the amount that you need to pay your landlord,

  or both.

  The rest of the questions on this website will complete your
  answer.
  
  % else:
  % if tenant_got_summons:
  You said that the tenant got the Summons and Petition by personal delivery.
  % else:
  You said the tenant does not know if they got the Summons and Petition.
  % endif
  In this situation,
  most tenants file an answer.

  Filing an answer may:

  * Stop the tenant's eviction, or
  * Lower the amount that the tenant needs to pay their landlord,

  or both.

  The rest of the questions on this website will complete the tenant's
  answer.
  % endif
continue button field: recommend_filing_answer
---
code: |
  docket_number
  filing_date
  for party in other_parties:
    party.address.address
    party.attorney.gather()
  users.gather()
  petition_states_rent_amount
  if not lease_attached:
    petition_states_terms_of_lease
  petition_states_rent_periods
  petition_states_demand_made
  petition_review = True
comment: |
  filing_date
  is_rent_sought
  petition_requirements
  petition_review = True
---
id: unlawful detainer kick out
question: |
  % if person_answering == "tenant":
  Sorry, we can't help with your eviction
  % else: 
  Sorry, we can't help with this tenant's eviction
  % endif
subquestion: |
  % if person_answering == "tenant":
  **Currently, we can only help when your landlord is evicting you because you have not paid your rent.**  This type of eviction is called a Rent and Possession case.  If you are being evicted for another reason, contact [a Missouri legal aid provider](https://www.lsmo.org/).
  % else: 
  **Currently, we can only help when a landlord is evicting a tenant because they have not paid their rent.**  This type of eviction is called a Rent and Possession case. If a tenant is being evicted for another reason, contact [a Missouri legal aid provider](https://www.lsmo.org/).
  % endif
buttons:
  - I understand, let me keep going:
      code: |
        unlawful_detainer_kick_out_option = False
  - Just make a motion to continue:
      code: |
        unlawful_detainer_kick_out_option = True
  - Exit: exit
    url: https://motenantassistance.org/
---
id: petition requirements - rent amount
question: |
  % if person_answering == "tenant":
  How much rent does your landlord say that you owe?
  % else: 
  How much rent does the tenant's landlord say that they owe?
  % endif
subquestion: |
  % if tenant_got_summons:
  Look at the Summons and Petition to answer this question.

  Look for a line that looks something like this:

  [FILE ComplaintRentAmount.png, 100%]

  The landlord's petition may look different.
  % endif
fields:
  - label: |
      % if person_answering == "tenant":
      Does the petition say what amount of rent you owe?
      % else:
      Does the petition say what amount of rent the tenant owes?
      % endif 
    field: petition_states_rent_amount
    datatype: yesnoradio
  - label: |
      % if person_answering == "tenant":
      How much does the Landlord's Petition say that you owe **in rent**?
      % else:
      How much does the Landlord's Petition say that the tenant owes **in rent**?
      % endif 
    field: rent_amount_owed
    datatype: currency
    show if: petition_states_rent_amount
  - label: |
      % if person_answering == "tenant":
      Does the petition say you owe an amount **other** than rent?
      % else:
      Does the petition say the tenant owes an amount **other** than rent?
      % endif 
    field: other_charges_alleged
    datatype: yesnomaybe
    show if: 
      code: |
        person_answering == "tenant"
  - note: |
      Other charges may include a pet fee, cleaning fee, fee for repairs, etc.
---
id: separate amounts
question: |
  % if person_answering == "tenant":
  Does the petition separate the amount you owe in rent from other charges?
  % else:
  Does the petition separate the amount the tenant owes in rent from other charges?
  % endif
fields:
  - Are rent charges separated from other charges: petition_separates_nonrent
    datatype: yesnomaybe
---
depends on: petition_states_rent_amount
code: |
  if petition_states_rent_amount:
    petition_alleges_nonrent = False
  else:
    petition_alleges_nonrent = True
---
id: petition requirements - terms of lease
question: |
  % if person_answering == "tenant":
  Is a copy of your lease attached to the petition?
  % else: 
  Is a copy of the tenant's lease attached to the petition? 
  % endif
subquestion: |
  % if person_answering == "tenant":
  With the Landlord's Petition, your landlord needs to either:
  
   1. attach a copy of the lease, or
   2. write a summary of your rental agreement, including the monthly rent, the kind of agreement (year to year or month to month), and the day rent is due.
  % else: 
    With the Landlord's Petition, the tenant's landlord needs to either:
  
   1. attach a copy of the lease, or
   2. write a summary of the tenant's rental agreement, including the monthly rent, the kind of agreement (year to year or month to month), and the day rent is due.
  % endif
  The petition looks different in different counties. But it may look like this:

  [FILE ComplaintTerms.png, 100%]
fields:
  - "Is the lease attached to the Landlord's Petition?": lease_attached
    datatype: yesnoradio
  - label: |
      % if person_answering == "tenant":
      Does the Landlord's Petition include a summary of your rental agreement?
      % else:
      Does the Landlord's Petition include a summary of the tenant's rental agreement?
      % endif 
    field: petition_states_terms_of_lease
    datatype: yesnomaybe
    show if: 
      variable: lease_attached
      is: False
  - note: |
      ${ collapse_template(terms_of_lease_explanation) }
    show if: 
      variable: lease_attached
      is: False
---
template: terms_of_lease_explanation
subject: |
  What kind of summary?
content: |
  For example, does it include the monthly rent, the kind of agreement (year to year or month to month), and the day rent is due?
---
id: petition requirements - periods due
question: |
  % if person_answering == "tenant":
  Does the petition say the amount you owe for each month?
  % else: 
  Does the petition say the amount the tenant owes for each month?
  % endif
subquestion: |
  % if person_answering == "tenant":
  The Landlord's Petition must say what months you allegedly owe rent for.
  % else: 
  The Landlord's Petition must say what months the tenant allegedly owes rent for.
  % endif
fields:
  - label: |
      % if person_answering == "tenant":
      Does the petition say a specific amount for each month your landlord says you owe rent?
      % else:
      Does the petition say a specific amount for each month the landlord says the tenant owes rent?
      % endif 
    field: petition_states_rent_periods
    datatype: yesnomaybe
---
id: petition requirements - demand
question: |
  Does the Petition say that the landlord demanded rent?
subquestion: |
  % if person_answering == "tenant":
  The Landlord's Petition must say that the "landlord demanded rent", meaning that the landlord told you that you had to pay rent or leave.
  % else:
  The Landlord's Petition must say that the "landlord demanded rent", meaning that the landlord told the tenant that they had to pay rent or leave.
  % endif
  
  The Demand may look like this, but can have different language:
  
  [FILE ComplaintDemand.png, 100%]
 
fields:
  - "Does the Landlord's Petition say the landlord demanded rent?": petition_states_demand_made
    datatype: yesnomaybe
---
id: is seeking past due rent true
comment: |
  DOCKET
  (PETITION)
question: |
  Is the landlord seeking recovery of past-due rent?
help:
  label: |
    How do I find this?
  content: |
    This information can be found on the **Docket** or the **Petition**.
    
    (TODO: Insert information to help user locate this information on the Docket and Petition)
fields:
  - "": is_rent_sought
    datatype: yesno
    input type: yesnoradio
---
id: has refused payment
comment: |
  ADDITIONAL
  (TODO: support multiple refusal dates)
  (TODO: implement Other explanation)
  (TODO: change was_attempt_full question options from Yes/No to Full/Partial)
question: |
  % if person_answering == "tenant":
  Did you try to pay the rent?
  % else: 
  Did the tenant try to pay the rent?
  % endif
subquestion: |
  % if person_answering == "tenant" and petition_states_rent_amount:
  Your landlord said you owe ${ currency(rent_amount_owed) }. Think about this amount when you answer
  the questions on this page.
  % elif person_answering in ["attorney","tenant_helper"] and petition_states_rent_amount:
    The landlord said the tenant owes ${ currency(rent_amount_owed) }. The tenant should think about this amount when they answer
  the questions on this page.
  % endif
fields:
  - label: |
      % if person_answering == "tenant":
      Did you offer to give your landlord the money they say you owe?
      % else:
      Did the tenant offer to give the landlord the money they say the tenant owes?
      % endif 
    field: offer_attempts.there_are_any
    datatype: yesnoradio
---
id: payment attempt loop
question: |
  % if person_answering == "tenant":
  Information about the ${ ordinal(i) } time you tried to pay the rent
  % else: 
  Information about the ${ ordinal(i) } time the tenant tried to pay the rent
  % endif
subquestion: |
  % if i > 0:
  % if person_answering == "tenant":
  So far, you said you
  % else: 
  So far, the tenant said they
  % endif
  % for offer in offer_attempts.complete_elements():
  
   - Tried to pay ${ "the full amount" if offer.was_attempt_full else "part of the rent" } on ${ offer.attempt_date } ${ offer.attempt_method } but the landlord refused.
   
  % endfor
  % endif
fields:
  - When?: offer_attempts[i].attempt_date
    datatype: date
  - label: |
      % if person_answering == "tenant":
      How did you try to give your landlord the money?
      % else:
      How did the tenant try to give the landlord the money?
      % endif 
    field: offer_attempts[i].attempt_method
    input type: radio
    choices:
      - ${"I wrote a letter" if person_answering == "tenant" else "Wrote a letter"}: "by letter"
      - ${"I sent an email" if person_answering == "tenant" else "Sent an email"}: "by email"
      - ${"I told my landlord in person" if person_answering == "tenant" else "Told the landlord in person"}: "in person"
      - ${"I told my landlord in a phone call" if person_answering == "tenant" else "Told the landlord in a phone call"}: "in a phone_call"
      - Other: "other"
  - label: |
      % if person_answering == "tenant":
      How much did you offer to pay?
      % else:
      How much did the tenant offer to pay?
      % endif 
    field: offer_attempts[i].was_attempt_full
    datatype: radio
    choices:
      - All of the money: True
      - Part of the money: False
  - label: |
      % if person_answering == "tenant":
      Did your landlord say no to your offer to pay?
      % else:
      Did the landlord say no to the tenant's offer to pay?
      % endif 
    field: offer_attempts[i].has_refused_payment
    datatype: yesnoradio
  - label: |
      % if person_answering == "tenant":
      Did your landlord say no in a writing that you can bring to court, or did someone else see your landlord say "no"?
      % else:
      Did the landlord say no in a writing that the tenant can bring to court, or did someone else see the tenant's landlord say "no"?
      % endif 
    field: offer_attempts[i].has_attempt_evidence
    datatype: yesnoradio
#  - note: |
#      ${ collapse_template(example_of_refused_payment_evidence) }
#    show if: offer_attempts[i].has_refused_payment
#---
#template: example_of_refused_payment_evidence
#subject: |
#  What kind of evidence?
#content: |
#  For example, a letter from the landlord refusing to accept the money, a written check or money order, or a witness to the landlord's refusal.
---
question: |
  % if person_answering == "tenant":
  Did you make any other attempts to pay the rent?
  % else: 
  Did the tenant make any other attempts to pay the rent?
  % endif
subquestion: |
  % if len(offer_attempts.complete_elements()) > 0:
  % if person_answering == "tenant":
  So far, you said you
  % else: 
  So far, the tenant said they
  % endif
  % for offer in offer_attempts.complete_elements():
  
   - tried to pay ${ "the full amount" if offer.was_attempt_full else "part of the rent" } on ${ offer.attempt_date } ${ offer.attempt_method } but the landlord refused.
   
  % endfor
  % endif
fields:
  - label: |
      % if person_answering == "tenant":
      Did you make any other attempts to pay the rent?
      % else:
      Did the tenant make any other attempts to pay the rent?
      % endif 
    field: offer_attempts.there_is_another
    datatype: yesnoradio
---
id: pay and stop eviction
decoration: circle-info
question: |
  % if person_answering == "tenant":
  You may be able to pay and stop the eviction
  % else:
  The tenant may be able to pay and stop the eviction
  % endif
subquestion: |
  % if person_answering == "tenant":
  If you:
  % if petition_states_rent_amount:
  
  * Pay the full ${ currency(rent_amount_owed) }, and 
  % else:
  
  * Pay the full amount you owe, and 
  % endif
  * Pay the full court costs

  You can stop the eviction and stay in your home.
  % else: 
  If the tenant:
  % if petition_states_rent_amount:
  
  * Pays the full ${ currency(rent_amount_owed) }, and 
  % else:
  
  * Pays the full amount they owe, and 
  % endif
  * Pays the full court costs

  The tenant can stop the eviction and stay in their home.
  % endif
fields:
  - label: |
      % if person_answering == "tenant":
      Will you pay the full amount your landlord says you owe, plus court costs, to stop the eviction?
      % else:
      Will the tenant pay the full amount their landlord says the tenant owes them, plus court costs, to stop their eviction?
      % endif 
    field: will_offer_payment
    datatype: yesnoradio
---
id: warranty of habitability
question: |
  % if person_answering == "tenant":
  Does your home have any of the problems listed below?
  % else: 
  Does the tenant's home have any of the problems listed below?
  % endif
subquestion: |
  ${ collapse_template(bad_conditions_explanation_template) }

  List problems that have been fixed if they happened with the last 2 years. 
fields: 
  - label: |
      % if person_answering == "tenant":
      Have you had any of these problems **in the last 2 years**?
      % else:
      Has the tenant had any of these problems **in the last 2 years**?
      % endif 
    field: warranty_breaches
    datatype: checkboxes
    choices: 
      - ${ conditions_text["no_heat"] }: no_heat
      - ${ conditions_text["no_cooling"] }: no_cooling
      - ${ conditions_text["insufficient_water"] }: insufficient_water
      - ${ conditions_text["insecure_locks"] }: insecure_locks
      - ${ conditions_text["mice_or_rats"] }: mice_or_rats
      - ${ conditions_text["roaches"] }: roaches
      - ${ conditions_text["bedbugs"] }: bedbugs
      - ${ conditions_text["chronic_dampness"] }: chronic_dampness
      - ${ conditions_text["standing_water"] }: standing_water
      - ${ conditions_text["electric_problem"] }: electric_problem
      - ${ conditions_text["lead_paint"] }: lead_paint
      - ${ conditions_text["leaky_windows"] }: leaky_windows
      - ${ conditions_text["has_plumbing_problems"] }: has_plumbing_problems
      - ${ conditions_text["has_structural_issues"] }: has_structural_issues
      - ${ conditions_text["ceiling_not_weathertight"] }: ceiling_not_weathertight
      - ${ conditions_text["floor_holes"] }: floor_holes
      - Other: other
  - label: |
      % if person_answering == "tenant":
      What other problems do you have?
      % else:
      What other problems does the tenant have?
      % endif 
    field: warranty_breach_other
    show if: warranty_breaches['other']
---
id: estoppel breaches
question: |
  % if person_answering == "tenant":
  Did your landlord violate other laws?
  % else: 
  Did the landlord violate other laws?
  % endif
subquestion: |
  ${ collapse_template(estoppel_explanation_template) }
fields:
  - Check any statement that is true: estoppel_breaches
    datatype: checkboxes
    choices:
      - ${ estoppel_breaches_text['not_up_to_code'] }: not_up_to_code
      - ${ estoppel_breaches_text['violated_law'] }: violated_law
      - ${ estoppel_breaches_text['occupancy_permit'] }: occupancy_permit
      - Other: other
  - label: |
      % if person_answering == "tenant":
      What other problems do you have?
      % else:
      What other problems does the tenant have?
      % endif 
    field: other_estoppel_breaches
    show if: estoppel_breaches['other']
---
variable name: estoppel_breaches_text
use objects: True
data:
  not_up_to_code:
    question: The home is not up to code.
    document: The home is not up to code.
  violated_law:
    question: The landlord violated local or state laws about the condition of the home.
    document: The landlord violated local or state laws about the condition of the home.
  occupancy_permit:
    document: The landlord does not have an occupancy permit for the home.
    question: The landlord does not have an occupancy permit for the home.
---
template: estoppel_explanation_template
subject: |
  What other laws does a landlord have to follow?
content: |
  In some areas, a landlord has to follow a "housing code" that specifies the condition of the home that the landlord must maintain.
  
  Other local or state laws can create requirements that a landlord must meet.
  
  An occupancy permit may be required for a landlord to rent a home.
---
variable name: conditions_text
use objects: True
data:
  no_heat:
    question: No heat or not enough heat in the winter time
    document: No heat or not enough heat in the winter time
  no_cooling:
    question: Too hot in the summer
    document: Too hot in the summer
  insufficient_water:
    question: Not enough hot or cold water
    document: Not enough hot or cold water
  insecure_locks:
    question: Locks are missing or not secure on windows or doors
    document: Locks are missing or not secure on windows or doors
  mice_or_rats:
    question: Mice or rats
    document: Mice or rats
  roaches:
    question: Cockroaches
    document: Cockroaches
  bedbugs:
    question: Bedbugs
    document: Bedbugs
  chronic_dampness:
    question: Mold, damp walls, ceilings or walls
    document: Mold, damp walls, ceilings or walls
  standing_water:
    question: Standing water or sewage
    document: Standing water or sewage
  electric_problem:
    question: Problem with electric wiring, outlets or switches
    document: Problem with electric wiring, outlets or switches
  lead_paint:
    question: Lead paint on a surface reachable by a young child
    document: Lead paint on a surface reachable by a young child
  leaky_windows:
    question: Windows are leaky
    document: Windows are leaky
  has_plumbing_problems:
    question: Has plumbing not in working order or is subject to flooding
    document: Has plumbing not in working order or is subject to flooding
  has_structural_issues:
    question: Dangerous structural problem
    document: Dangerous structural problem
  ceiling_not_weathertight:
    question: Ceiling has holes or cracks or is not weathertight
    document: Ceiling has holes or cracks or is not weathertight
  floor_holes:
    question: Floor has holes or cracks
    document: Floor has holes or cracks
---
## leaving "you" references because not sure how to make conditional
variable name: cqe_breaches_text
use objects: True
data:
  harassment:
    question: |
      % if person_answering == "tenant":
      Harass you in person or on the phone
      % else:
      Harassed Tenant in person or on the phone
      % endif
    document: Harassed Tenant in person or on the phone
  visits:
    question: |
      % if person_answering == "tenant":
      Make frequent or unnecessary visits or inspections of the property
      % else:
      Made frequent or unnecessary visits or inspections of the property
      % endif
    document: Made frequent or unnecessary visits or inspections of the property
  remodeling:
    question: |
      % if person_answering == "tenant":
      Do unnecessary remodeling work, or maintenance work that takes longer than they promised
      % else:
      Performed unnecessary remodeling work, or maintenance work that took longer than they promised
      % endif
    document: Performed unnecessary remodeling work, or maintenance work that took longer than they promised
  access:
    question: |
      % if person_answering == "tenant":
      Allow construction that stops you from easily getting into your home or makes you take a long detour
      % else:
      Allows construction that stops the tenant from easily getting into their home or makes them take a long detour
      % endif
    document: Allows construction that stops the tenant from easily getting into their home or makes them take a long detour
  animal:
    question: |
      % if person_answering == "tenant":
      Allow their own dog or pet to bark constantly and disturb you
      % else:
      Allowed their dog or pet to bark constantly and disturb Tenant
      % endif 
    document: Allowed their dog or pet to bark constantly and disturb Tenant
  vermin:
    question: |
      % if person_answering == "tenant":
      Not exterminate or take care of vermin or pests in the walls making disruptive noises
      % else:
      Failed to exterminate or take care of vermin or pests in the walls making disruptive noises
      % endif
    document: Failed to exterminate or take care of vermin or pests in the walls making disruptive noises
---
template: bad_conditions_explanation_template
subject: |
  % if person_answering == "tenant":
  Why does the condition of my house matter?
  % else: 
  Why does the condition of the tenant's house matter?
  % endif
content: |
  % if person_answering == "tenant":
  Your landlord may owe you money if there are problems in your home. The money your landlord owes you might
  mean you do not owe part or all of the rent your landlord says you owe.
  
  Problems in your home may give you a claim for **Breach of Warranty of Habitability** 
  if the condition of your home affected your life, health, or safety, and made the dwelling uninhabitable in whole or in part.
  % else: 
  The landlord may owe the tenant money if there are problems in their home. The money the landlord owes the tenant might
  mean they do not owe part or all of the rent the landlord says the tenant owes.
  
  Problems in the tenant's home may give them a claim for **Breach of Warranty of Habitability** 
  if the condition of their home affected their life, health, or safety, and made the dwelling uninhabitable in whole or in part.  
  % endif
---
id: covenant of quiet enjoyment
question: |
  % if person_answering == "tenant":
  Did your landlord violate your right to live peacefully in your home?
  % else:
  Did the landlord violate the tenant's right to live peacefully in their home?
  % endif
subquestion: |
  ${ collapse_template(bqe_explanation_template) }
fields: 
  - label: |
      % if person_answering == "tenant":
      Did your landlord:
      % else:
      The landlord:
      % endif 
    field: cqe_breaches
    datatype: checkboxes
    choices:
      - ${ cqe_breaches_text["harassment"] }: harassment
      - ${ cqe_breaches_text["visits"] }: visits
      - ${ cqe_breaches_text["remodeling"] }: remodeling
      - ${ cqe_breaches_text["access"] }: access
      - ${ cqe_breaches_text["animal"] }: animal
      - ${ cqe_breaches_text["vermin"] }: vermin
      - ${ "Otherwise violate your right to live peacefully in your home" if person_answering == "tenant" else "Otherwise violated the tenant's right to live peacefully in their home"}: other
  - Other (explain): other_cqe_breach
    datatype: area
    show if: cqe_breaches["other"]
---
template: bqe_explanation_template
subject: |
  Why does this matter?
content: |
  % if person_answering == "tenant":
  Your landlord may owe you money if they violated your right to live peacefully in your home. The money may
  reduce the amount of rent you owe or mean that you do not owe any rent to your landlord.

  You have a claim of **Breach of Covenant of Quiet Enjoyment** if your landlord is responsible for a substantial
  disruption in the use and quiet enjoyment of your rental property.
  % else: 
  The landlord may owe the tenant money if they violated the tenant's right to live peacefully in their home. The money may
  reduce the amount of rent the tenant owes or mean that the tenant does not owe any rent to the landlord.

  The tenant has a claim of **Breach of Covenant of Quiet Enjoyment** if the landlord is responsible for a substantial
  disruption in the use and quiet enjoyment of the rental property.
  % endif
---
id: preview eviction_defender
question: |
  % if person_answering == "tenant":
  Preview your form before you sign it
  % else:
  Preview the form before signing
  % endif
subquestion: |
  % if person_answering == "tenant":
  Here is a preview of the form you will sign on the next page.
  % else:
  Here is a preview of the form to be signed on the next page.
  % endif
  
  ${ al_court_bundle.as_pdf(key='preview') }

  Click the image to open it in a new tab. Click the "Edit answers" button
  to edit your answers.

  ${ action_button_html(url_action('review_eviction_answer'), label='Edit answers', color='info') }
  
  % if person_answering == "tenant":
  Remember to come back to this window to continue and sign your form.
  % else:
  Remember to come back to this window to continue and sign the form.
  % endif
continue button field: eviction_defender_preview_question    
---
code: |
  signature_fields = []
---
code: |
  # This is a placeholder for the addresses that will be searched
  # for matching address to court. Edit if court venue is based on 
  # a different address than the user's
  addresses_to_search = [user.address for user in users]
---
depends on: original_hearing_date_past
code: |
  wants_to_file = dict()
  wants_to_file['answer'] = True
  if not original_hearing_date_past:
    wants_to_file['continuance'] = True
  else:
    wants_to_file['continuance'] = True
---
code: |
  users[0].address.reset_geocoding()
  users[0].address.geocode()
  address_geocoding_reset = True
---
id: eviction motion to continue review screen
continue button field: review_eviction_answer
question: |
  % if person_answering == "tenant":
  Review your answers
  % else: 
  Review the answers
  % endif
review:
  - note: | 
      % if person_answering == "tenant":
      ##Information about you##
      % else:
      ##Information about the tenant##
      % endif
  - Edit:
      - users.revisit
      - recompute:
        - defense_logic
    button: |
      Defendants:
      % if users.there_are_any:
      % for item in users:

         - **${ item }**

      % endfor
      % else:
      **None**
      % endif
  - Edit:
      - will_offer_payment
      - recompute:
        - defense_logic
    button: |
      % if person_answering == "tenant":
      You may be able to pay and stop the eviction
      % else:
      The tenant may be able to pay and stop the eviction.
      % endif
      **${ "Maybe" if will_offer_payment is None else yesno(will_offer_payment) }**
  - note: | 
      ##Information about the other party##
  - Edit:
      - other_parties.revisit
      - recompute:
          - defense_logic
          - defense_unrepresented_corporation
    button: |
      Plaintiffs:
      % if other_parties.there_are_any:
      % for item in other_parties:
      
      **${ item }**,
         **${ item.address }**
      
      % if item.attorney.there_are_any:
         - Attorney: **${ item.attorney[0] }**
      **${ item.attorney[0].address }**
      
      % else:
         - Attorney: **None**
      
      % endif
         - Person Type: **${ item.person_type }**
      % endfor
      % else:
      **None**
      % endif
  - note: | 
      % if person_answering == "tenant":
      ##Information about your rental agreement##
      % else:
      ##Information about the rental agreement##
      % endif
  - Edit:
      - lease_attached
      - recompute:
        - defense_logic
        - defense_lease_not_attached
        - lease_or_terms
    button: |
      Does the summons and petition packet have the lease attached as an exhibit? :
      **${ "Maybe" if lease_attached is None else yesno(lease_attached) }**
  - Edit:
      - petition_states_terms_of_lease
      - recompute:
        - defense_logic
        - lease_or_terms
    button: |
      Is the lease attached to the petition?:
      **${ "Maybe" if petition_states_terms_of_lease is None else yesno(petition_states_terms_of_lease) }**
  - Edit:
      - is_rent_subsidized
      - recompute:
        - defense_logic
        - defense_excessive_rent_for_subsidized_housing
    button: |
      % if person_answering == "tenant":
      Do you get a rent subsidy or do you live in public housing?
      % else:
      Does the tenant get a rent subsidy or do they live in public housing?:
      % endif
      **${ "Maybe" if is_rent_subsidized is None else yesno(is_rent_subsidized) }**
  - Edit:
      - subsidized_housing_type
      - recompute:
        - defense_logic
    button: |
      Type of Subsidized Housing::
      **${ subsidized_housing_text["subsidized_housing_type"] }**
  - Edit:
      - unfair_duress
      - recompute:
        - defense_logic
        - defense_lease_signed_under_duress
    button: |
      % if person_answering == "tenant":
      Did the landlord unfairly pressure you to sign the lease?
      % else:
      Did the landlord unfairly pressure the tenant to sign the lease?
      % endif
      **${ "Maybe" if unfair_duress is None else yesno(unfair_duress) }**
  - Edit:
      - false_promises.revisit
      - recompute:
        - defense_logic
        - defense_fraud_lease
    button: |
      False Promises Made By The Landlord:
      % if false_promises.there_are_any:
      % for item in false_promises:

         - **${ item }**

      % endfor
      % else:
      **None**
      % endif
  - Edit:
      - relied_on_false_promises
      - recompute:
        - defense_logic
        - defense_fraud_lease
    button: |
      % if person_answering == "tenant":
      Did the landlord's promise get you to sign the lease?
      % else:
       Did the landlord's promise get the tenant to sign the lease?:
      % endif
      **${ "Maybe" if relied_on_false_promises is None else yesno(relied_on_false_promises) }**
  - Edit:
      - landlord_foreclosed
      - recompute:
        - defense_logic
        - defense_foreclosure
    button: |
      % if person_answering == "tenant":
      Did the bank foreclose on this property while you lived there?
      % else:
      Did the bank foreclose on this property while the tenant lived there?
      % endif
      **${ "Maybe" if landlord_foreclosed is None else yesno(landlord_foreclosed) }**
  - Edit:
      - notice_of_foreclosure
      - recompute:
        - defense_logic
        - defense_foreclosure
    button: |
      % if person_answering == "tenant":
      Did you get a letter that told you about the foreclosure?
      % else:
      Did the tenanat get a letter that told the tenant about the foreclosure?
      % endif
      **${ "Maybe" if notice_of_foreclosure is None else yesno(notice_of_foreclosure) }**
  - Edit:
      - previous_landlord_sold_property
      - recompute:
        - defense_logic
        - defense_new_owner_failed_to_provide_notice_of_sale
    button: |
      % if person_answering == "tenant":
      Did your previous landlord sell the property to the new landlord?
      % else:
      Did the tenant's previous landlord sell the property to the new landlord?
      % endif
      **${ "Maybe" if previous_landlord_sold_property is None else yesno(previous_landlord_sold_property) }**
  - Edit:
      - notice_of_sale_provided
      - recompute:
        - defense_logic
    button: |
      % if person_answering == "tenant":
      Did the landlord provide you notice of the sale?
      % else:
      Did the new landlord provide the tenant notice of the sale?
      % endif
      **${ "Maybe" if notice_of_sale_provided is None else yesno(notice_of_sale_provided) }**
  - note: | 
      ##Information about the eviction##
  - Edit:
      - trial_court_name
      - recompute:
        - defense_logic
    button: |
      Trial Court Name:
      **${ trial_court_name }**
  - Edit:
      - docket_number
      - recompute:
        - defense_logic
    button: |
      Docket number:
      **${ docket_number }**
  - Edit:
      - original_hearing_date
      - recompute:
        - defense_logic
    button: |
      Date of hearing:
      **${ original_hearing_date }**
  - Edit:
      - original_hearing_time
      - recompute:
        - defense_logic
    button: |
      Time of hearing:
      **${ original_hearing_time }**
  - Edit:
      - case_type
      - recompute:
        - defense_logic
    button: |
      Case Type:
      % if case_type.any_true():
      % for item in case_type.true_values():
        **${ item }**
      % endfor
      % else:
      **None**
      % endif
  - Edit:
      - filing_date
      - recompute:
        - defense_logic
    button: |
      Filing Date:
      **${ filing_date }**
  - Edit:
      - tenant_got_summons
      - recompute:
        - defense_logic
        - defense_rent_pleading_requirement
        - defense_lease_not_attached
    button: |
      % if person_answering == "tenant":
      Did you receive the summons?
      % else:
      Did the tenant receive a copy of the Summons and Landlord's Petition?
      % endif
      **${ "Maybe" if tenant_got_summons is None else yesno(tenant_got_summons) }**
  - Edit:
      - method_of_summons_service
      - recompute:
        - defense_logic
    button: |
      % if person_answering == "tenant":
      How did you receive the Summons and Landlord's Petition?
      % else:
      How did the tenant receive the Summons and Landlord's Petition?
      % endif
      % if method_of_summons_service.any_true():
      % for item in method_of_summons_service.true_values():
        **${ method_of_summons_service_text["item"] }**
      % endfor
      % else:
      **None**
      % endif
  - Edit:
      - petition_available
      - recompute:
        - defense_logic
        - defense_rent_pleading_requirement
        - defense_lease_not_attached
    button: |
      Do you have a copy of the Landlord's Petition available?:
      **${ yesno(petition_available) }**
  - note: | 
      ##Your claims and defenses##
  - Edit:
      - petition_states_rent_amount
      - recompute:
        - defense_logic
        - defense_rent_pleading_requirement
    button: |
      % if person_answering == "tenant":
      Does the petition say what amount of rent you owe?
      % else:
      Does the petition say what amount of rent the tenant owes?
      % endif
      **${ "Maybe" if petition_states_rent_amount is None else yesno(petition_states_rent_amount) }**
  - Edit:
      - petition_alleges_nonrent
      - recompute:
        - defense_logic
        - defense_rent_pleading_requirement
    button: |
      Does the petition allege nonrent?:
      **${ "Maybe" if petition_alleges_nonrent is None else yesno(petition_alleges_nonrent) }**
  - Edit:
      - petition_states_rent_periods
      - recompute:
        - defense_logic
        - defense_rent_pleading_requirement
    button: |
      Does the petition list each month that the landlord claims you owe rent?:
      **${ "Maybe" if petition_states_rent_periods is None else yesno(petition_states_rent_periods) }**
  - Edit:
      - was_rent_paid
      - recompute:
        - defense_logic
        - defense_rent_payment
    button: |
      % if person_answering == "tenant":
      Did you pay at least part of the rent?
      % else:
      Did the tenant pay the rent that was allegedly owed?
      % endif
      **${ "Maybe" if was_rent_paid is None else yesno(was_rent_paid) }**
  - Edit:
      - rent_amount_paid
      - recompute:
        - defense_logic
        - defense_rent_payment
    button: |
      % if person_answering == "tenant":
      How much did you pay?
      % else:
      How much did the tenant pay?
      % endif
      **${ rent_amount_paid_text["rent_amount_paid"] }**
  - Edit:
      - offer_attempts.revisit
      - recompute:
        - defense_logic
        - defense_tender_refused
    button: |
      Attempts to Pay Rent:
      % if len(offer_attempts) == 1:
      **1 Attempt**
      % elif len(offer_attempts) > 1:
      **${ len(offer_attempts) } Attempts**
      % else:
      **None**
      % endif
  - Edit:
      - excessive_rent
      - recompute:
        - defense_logic
        - defense_excessive_rent_for_subsidized_housing
    button: |
      % if person_answering == "tenant":
      Is your landlord asking you to pay an amount that is more than your tenant rent share?
      % else:
      Is your landlord asking the tenant to pay an amount that is more than the tenant rent share?
      % endif
      **${ "Maybe" if excessive_rent is None else yesno(excessive_rent) }**
  - Edit:
      - late_fees_assessed
      - recompute:
        - defense_logic
        - defense_liquidated_damages_late_fees
        - defense_illegal_late_fees
    button: |
      % if person_answering == "tenant":
      Is the landlord claiming that you owe late fees?
      % else:
      Is the landlord claiming that the tenant owes late fees?
      % endif
      **${ "Maybe" if late_fees_assessed is None else yesno(late_fees_assessed) }**
  - Edit:
      - late_fees_penalty
      - recompute:
        - defense_logic
        - defense_liquidated_damages_late_fees
    button: |
      Are the late fees more than any actual costs the landlord would have to pay because of late rent?:
      **${ "Maybe" if late_fees_penalty is None else yesno(late_fees_penalty) }**
  - Edit:
      - late_fees_provision_in_lease
      - recompute:
        - defense_logic
        - defense_liquidated_damages_late_fees
      - defense_illegal_late_fees
    button: |
      Does the lease say that they landlord can charge late fees?:
      **${ "Maybe" if late_fees_provision_in_lease is None else yesno(late_fees_provision_in_lease) }**
  - Edit:
      - petition_separates_nonrent
      - recompute:
        - defense_logic
    button: |
      % if person_answering == "tenant":
      Does the petition separate the amount you owe in rent from other charges?
      % else:
      Does the petition separate the amount the tenant owes in rent from other charges?
      % endif
      **${ "Maybe" if petition_separates_nonrent is None else yesno(petition_separates_nonrent) }**
  - Edit:
      - petition_states_demand_made
      - recompute:
        - defense_logic
        - defense_rent_pleading_requirement
    button: |
      Does the Petition say that the landlord demanded rent?:
      **${ "Maybe" if petition_states_demand_made is None else yesno(petition_states_demand_made) }**
  - note: | 
      ##Landlord Agreement##
  - Edit:
      - landlord_agreement
      - recompute:
        - defense_logic
        - defense_settlement
    button: |
      % if person_answering == "tenant":
      Did you make a settlement agreement with the landlord to avoid the eviction?
      % else:
      Did the tenant make a settlement agreement with the landlord to avoid the eviction?
      % endif
      **${ "Maybe" if landlord_agreement is None else yesno(landlord_agreement) }**
  - Edit:
      - landlord_agreement_type
      - recompute:
        - defense_logic
    button: |
      What type of agreement did you make?:
      **${ landlord_agreement_type }**
  - Edit:
      - landlord_agreement_terms
      - recompute:
        - defense_logic
    button: |
      What were the terms of the settlement agreement with the landlord?:
      **${ landlord_agreement_terms }**
  - Edit:
      - tenant_compliance_with_agreement
      - recompute:
        - defense_logic
        - defense_settlement
    button: |
      % if person_answering == "tenant":
      Did you comply with the settlement agreement with the landlord?
      % else:
      Did the tenant comply with the settlement agreement with the landlord?
      % endif
      **${ "Maybe" if tenant_compliance_with_agreement is None else yesno(tenant_compliance_with_agreement) }**
  - Edit:
      - tenant_compliance_with_agreement_proof
      - recompute:
        - defense_logic
        - defense_settlement
    button: |
      % if person_answering == "tenant":
      Do you have proof that you complied with the agreement?
      % else:
      Does the tenant have proof that the tenant complied with the agreement?
      % endif
      **${ "Maybe" if tenant_compliance_with_agreement_proof is None else yesno(tenant_compliance_with_agreement_proof) }**
  - note: | 
      ##Landlord Problems##
  - Edit:
      - warranty_breaches
      - recompute:
        - defense_breach_of_habitability
        - defense_logic
    button: |
      Problems Landlord Failed to Repair:
      % if warranty_breaches.any_true():
      % for item in warranty_breaches.true_values():
      % if item == "other":
      
       - **${ warranty_breach_other }**
      
      % else:
      
       - **${ conditions_text[item] }**
      
      % endif
      % endfor
      % else:
      **None**
      % endif
  - Edit:
      - notice_of_breach_to_landlord
      - recompute:
        - defense_logic
        - defense_breach_of_habitability
    button: |
      % if person_answering == "tenant":
      Did you tell the landlord about these problems?
      % else:
      Did the tenant tell the landlord about these problems?
      % endif
      **${ "Maybe" if notice_of_breach_to_landlord is None else yesno(notice_of_breach_to_landlord) }**
  - Edit:
      - cqe_breaches
      - recompute:
        - defense_logic
        - defense_breach_of_cqe
        - defense_estoppel_illegality
    button: |
      Harassment and other breaches of quiet enjoyment:
      % if cqe_breaches.any_true():
      % for item in cqe_breaches.true_values():
      % if item == "other":
      
       - **${ other_cqe_breach }**
      
      % else:
      
       - **${ cqe_breaches_text[item] }**
      
      % endif
      % endfor
      % else:
      **None**
      % endif
  - Edit:
      - estoppel_breaches
      - recompute:
        - defense_logic
        - defense_estoppel_illegality
    button: |
      Other Landlord Violations:
      % if estoppel_breaches.any_true():
      % for item in estoppel_breaches.true_values():
      % if item == "other":
      
       - **${ other_estoppel_breaches }**
      
      % else:
      
       - **${ estoppel_breaches_text[item] }**
      
      % endif
      % endfor
      % else:
      **None**
      % endif
---
continue button field: users.revisit
question: |
  Edit users
subquestion: |
  ${ users.table }

  ${ users.add_action() }
---
table: users.table
rows: users
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
  - Address: |
      row_item.address
edit:
  - name.first
  - address
confirm: True
---
continue button field: other_parties.revisit
question: |
  Edit Plaintiffs/Landlord
subquestion: |
  ${ other_parties.table }

  ${ other_parties.add_action() }
---
table: other_parties.table
rows: other_parties
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
  - Address: |
      row_item.address.block() if defined("row_item.address.address") else ""
  - Person or Business: |
      row_item.person_type
  - Represened by an attorney?: |
      row_item.attorney.there_are_any
edit:
  - name.first
  - address.address
  - attorney.revisit
confirm: True
---
continue button field: false_promises.revisit
question: |
  Edit False Promises Made By Landlord
subquestion: |
  ${ false_promises.table }
  
  ${ false_promises.add_action() }
---
table: false_promises.table
rows: false_promises
columns:
  - no label: |
      row_item
edit: True
---
continue button field: offer_attempts.revisit
question: |
  Edit Attempts to Pay Rent
subquestion: |
  ${ offer_attempts.table }
  
  ${ offer_attempts.add_action() }
---
table: offer_attempts.table
rows: offer_attempts
columns:
  - Attempt Date: |
      row_item.attempt_date
  - Attempt Method: |
      row_item.attempt_method
  - Was Attempt to Pay Full Rent?: |
      row_item.was_attempt_full
  - Did The Landlord Refuse This Attempt?: |
      row_item.has_refused_payment
  - Do You Have Evidence of this Attempt?: |
      row_item.has_attempt_evidence if defined('row_item.has_attempt_evidence') else ""
edit:
  - attempt_date
  - attempt_method
  - was_attempt_full
  - has_refused_payment
---
continue button field: other_parties[i].attorney.revisit
question: |
  Edit Plaintiffs/Landlord
subquestion: |
  ${ other_parties[i].attorney.table }

  ${ other_parties[i].attorney.add_action() }
---
table: other_parties[i].attorney.table
rows: other_parties[i].attorney
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
  - Address: |
      row_item.address.block() if defined("row_item.address.address") else ""
edit:
  - address.address
  - name.first
---
id: download eviction_defender
event: eviction_defender_download
question: |
  All done
subquestion: |
  % if person_answering == "tenant":
  Thank you ${users}. Your form is ready to download and deliver.
  
  View, download, and send your form below. Click the "Edit answers" button to fix any mistakes.
  % else:
  Thank you ${users}. The tenant's form is ready to download and deliver.
  
  View, download, and send the tenant's form below. Click the "Edit answers" button to fix any mistakes.
  % endif 

  ${ action_button_html(url_action('review_eviction_answer'), label='Edit answers', color='info') }
  
  
  ${ al_user_bundle.download_list_html() }
  

  ${ al_user_bundle.send_button_html(show_editable_checkbox=True) }

progress: 100
---
objects:
  - eviction_defender_post_interview_instructions: ALDocument.using(title="Instructions", filename="eviction_helper_next_steps.docx", enabled=True, has_addendum=False, default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - eviction_motion_to_continue_attachment: ALDocument.using(title="Postpone your eviction hearing", filename="eviction_motion_to_continue.docx", has_addendum=False, default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - eviction_answer_attachment: ALDocument.using(title="File an Answer and Affirmative Defenses", filename="answer_defenses.docx", has_addendum=False, default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
---
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[eviction_defender_post_interview_instructions,eviction_motion_to_continue_attachment,eviction_answer_attachment], filename="eviction_helper.docx_package.pdf", title="All forms to download for your records", enabled=True)
  - al_court_bundle: ALDocumentBundle.using(elements=attachment_list_court, filename="eviction_helper.docx_package.pdf", title="All forms to download for your records", enabled=True)
---
depends on: original_hearing_date_past
code: |
  eviction_motion_to_continue_attachment.enabled = not original_hearing_date_past
---
code: |
  if (not case_type["AC Rent and Possession"] and not case_type["AC Landlord Action (Bulk)"]) and unlawful_detainer_kick_out_option:
    eviction_answer_attachment.enabled = False
  else:
    eviction_answer_attachment.enabled = True
---
attachments:
  - name: eviction motion to continue post interview instructions
    filename: Post-interview-instructions     
    variable name: eviction_defender_post_interview_instructions[i]        
    skip undefined: True
    docx template file: eviction_helper_next_steps.docx
  - name: eviction motion to continue attachment
    filename: eviction_motion_to_continue.docx     
    variable name: eviction_motion_to_continue_attachment[i]        
    skip undefined: True
    docx template file: motion_to_continue.docx
  - name: eviction answer
    filename: answer_defenses.docx     
    variable name: eviction_answer_attachment[i]        
    skip undefined: True
    docx template file: answer_defenses.docx
---
if: tenant_got_summons and petition_available and len(users)==1
question: Is any other tenant listed on this eviction case?
subquestion: |
  % if person_answering == "tenant":
  In an eviction case, tenants are called Defendants. Defendants are listed underneath the Plaintiffs, and your name and address should be included as a Defendant.
  % else:
  In an eviction case, tenants are called Defendants. Defendants are listed underneath the Plaintiffs, and the tenant's name and address should be included as a Defendant.
  % endif
  [FILE ComplaintCaptionDefendant.png, 100%]
  
fields:
  - label: |
      % if person_answering == "tenant":
      Are there any other Defendants listed besides you?
      % else:
      Are there any other Defendants listed besides the tenant?
      % endif
    field: users.there_is_another
    datatype: yesnoradio
---
if: defined('docket_available') and docket_available and len(users)==1
question: |
  Is any other tenant listed on this eviction case?
subquestion: |
  % if person_answering == "tenant":
  In an eviction case, tenants are called Defendants. Defendants are listed underneath the Plaintiffs, and your name and address should be included as a Defendant.
  % else:
    In an eviction case, tenants are called Defendants. Defendants are listed underneath the Plaintiffs, and the tenant's name and address should be included as a Defendant.
  % endif
fields:
  - label: |
      % if person_answering == "tenant":
      Are there any other Defendants listed besides you?
      % else:
      Are there any other Defendants listed besides the tenant?
      % endif
    field: users.there_is_another
    datatype: yesnoradio
---
id: Landlord representation
question: |
  Does ${ other_parties[i] } have an attorney?
subquestion: |
  If the landlord is represented by an attorney, then it will say "represented by" next to the 
  landlord's name, and the attorney's name and address will be to the right.
fields:
  - Is ${ other_parties[i] } represented by an attorney?: other_parties[i].attorney.there_are_any
    datatype: yesnoradio
---
if: docket_available
id: Landlord representation from Docket
question: |
  Does ${ other_parties[i] } have an attorney?
subquestion: |
  You can find the name and address of the attorney in the Parties and Attorneys tab in the online docket.
  
  [FILE Parties.png, 100%]
fields:
  - Is ${ other_parties[i] } represented by an attorney?: other_parties[i].attorney.there_are_any
    datatype: yesnoradio
---
if: tenant_got_summons and petition_available
id: Landlord representation from Summons
question: |
  Does ${ other_parties[i] } have an attorney?
subquestion: |
  If the landlord is represented by an attorney, then the attorney's name and address will be in the box next to the Landlord's name.
  
  [FILE MOSummonsPlaintiffAttorney.png, 100%]
fields:
  - Is ${ other_parties[i] } represented by an attorney?: other_parties[i].attorney.there_are_any
    datatype: yesnoradio
---
id: Opposing Attorney name
sets:
  - other_parties[i].attorney[j].name.first
  - other_parties[i].attorney[j].name.last
  - other_parties[i].attorney[j].name.middle
  - other_parties[i].attorney[j].name.suffix
question: |
  What is the name of the ${ other_parties[i] }'s attorney?
fields:
  - code: |
      other_parties[i].attorney[j].name_fields()
---
id: Opposing Attorney name from Docket
if: docket_available
sets:
  - other_parties[i].attorney[j].name.first
  - other_parties[i].attorney[j].name.last
  - other_parties[i].attorney[j].name.middle
  - other_parties[i].attorney[j].name.suffix
question: |
  What is the name of the ${ other_parties[i] }'s attorney?
subquestion: |
  You can find the name and address of the attorney in the Parties and Attorneys tab in the online docket.
  
  [FILE Parties.png, 100%]
fields:
  - code: |
      other_parties[i].attorney[j].name_fields()
---
id: Opposing Attorney name from Summons
if: tenant_got_summons and petition_available 
sets:
  - other_parties[i].attorney[j].name.first
  - other_parties[i].attorney[j].name.last
  - other_parties[i].attorney[j].name.middle
  - other_parties[i].attorney[j].name.suffix
question: What is the name of the ${ other_parties[i] }'s attorney?
subquestion: |
  If the landlord is represented by an attorney, then the attorney's name and address will be in the box next to the Landlord's name.
  
  [FILE MOSummonsPlaintiffAttorney.png, 100%]
fields:
  - code: |
      other_parties[i].attorney[j].name_fields()
--- 
id: Rent paid
question: |
  % if person_answering == "tenant":
  Have you paid at least part of the rent your landlord says you owe?
  % else: 
  Has the tenant paid at least part of the rent the landlord says the tenant owes?
  % endif
subquestion: |
  % if person_answering == "tenant" and petition_states_rent_amount:
  You said your landlord said you owe ${ currency(rent_amount_owed) }.
  % elif petition_states_rent_amount:
  The tenant's landlord said the tenant owes ${ currency(rent_amount_owed) }.
  % else:
  The petition does not say the amount that is allegedly owed.
  % endif
fields:
  - label: |
      % if person_answering == "tenant":
      I paid at least part of the rent
      % else:
      The tenant paid at least part of the rent
      % endif
    field: was_rent_paid
    datatype: yesnoradio
  - label: |
      % if person_answering == "tenant":
      How much did you pay?
      % else:
      How much did the tenant pay?
      % endif
    field: rent_amount_paid
    datatype: radio
    choices: 
      - ${ rent_amount_paid_text["all"] }: all
      - ${ rent_amount_paid_text["a_portion"] }: a_portion
    show if: was_rent_paid
---
variable name: rent_amount_paid_text
use objects: True
data:
  all:
    question: |
      % if person_answering == "tenant":
      I paid all of the rent
      % else:
      The tenant paid all of the rent
      % endif    
    document: |
      The tenant paid all of the rent
  a_portion:
    question: |
      % if person_answering == "tenant":
      I paid part of the rent
      % else:
      The tenant paid part of the rent
      % endif    
    document: |
      The tenant paid part of the rent
---
generic object: ALIndividual
id: service method
question: |
  % if person_answering == "tenant":
  How will you get a copy of the documents to ${ x }?
  % else:
  How will the tenant get a copy of the documents to ${ x }?
  % endif
fields:
  - label: |
      % if person_answering == "tenant":
      I will serve ${ x } by
      % else:
      The tenant will serve ${ x } by
      % endif
    field: x.service_method
    input type: radio
    code: al_service_methods
---
comment: |
  You can customize this block, and also add a translation for it with a language modifier,
  demonstrated below
variable name: al_service_methods
use objects: True
data:
  mail:
    question: Mail
    document: mail
  hand:
    question: Hand delivery
    document: hand delivery
  email:
    question: Email
    document: email
---
generic object: ALIndividual
id: any service address
question: |
  % if person_answering == "tenant":
  At what address will you serve ${ x }?
  % else:
  At what address will the tenant serve ${ x }?
  % endif
fields:
  - ${ x }'s service address is: x.service_address
    datatype: object_radio
    default: 
      - x.address if defined(x.address.attr_name("address")) else None
    choices:
      - x.address if defined(x.address.attr_name("address")) else None
      - x.mailing_address if defined(x.mailing_address.attr_name("address")) else None
    object labeler: |
      lambda y: y.on_one_line()      
    none of the above: |
      Somewhere else   
  - ${ x.service_address.address_label }: x.service_address.address
    address autocomplete: True
    show if:
      variable: x.service_address
      is: None
  - ${ x.service_address.unit_label }: x.service_address.unit
    required: False
    show if:
      variable: x.service_address
      is: None
  - ${ x.service_address.city_label }: x.service_address.city
    show if:
      variable: x.service_address
      is: None
  - ${ x.service_address.state_label }: x.service_address.state
    code: |
      states_list(country_code=AL_DEFAULT_COUNTRY)
    default: ${ AL_DEFAULT_STATE }
    show if:
      variable: x.service_address
      is: None
  - ${ x.service_address.zip_label }: x.service_address.zip
    required: False      
    show if:
      variable: x.service_address
      is: None
  - ${ x.service_address.country_label }: x.service_address.country
    code: countries_list()
    default: ${ AL_DEFAULT_COUNTRY }
    show if:
      variable: x.service_address
      is: None
---
if: x.attorney.there_are_any
generic object: ALIndividual
id: any service address - attorney
question: |
  % if person_answering == "tenant":
  At what address will you serve ${ x.attorney }?
  % else:
  At what address will the tenant serve ${ x.attorney }?
  % endif
subquestion: |
  ${ x } is represented by attorney ${ x.attorney }.  When somebody is represented by an attorney, the attorney must be served.
fields:
  - ${ x }'s service address is: x.service_address
    datatype: object_radio
    default: 
      - x.attorney[0].address if defined(x.attorney[0].address.attr_name("address")) else None
    choices:
      - x.attorney[0].address if defined(x.attorney[0].address.attr_name("address")) else None
      - x.attorney[0].mailing_address if defined(x.attorney[0].mailing_address.attr_name("address")) else None
    object labeler: |
      lambda y: y.on_one_line()      
    none of the above: |
      Somewhere else   
  - ${ x.service_address.address_label }: x.service_address.address
    address autocomplete: True
    show if:
      variable: x.service_address
      is: None
  - ${ x.service_address.unit_label }: x.service_address.unit
    required: False
    show if:
      variable: x.service_address
      is: None
  - ${ x.service_address.city_label }: x.service_address.city
    show if:
      variable: x.service_address
      is: None
  - ${ x.service_address.state_label }: x.service_address.state
    code: |
      states_list(country_code=AL_DEFAULT_COUNTRY)
    default: ${ AL_DEFAULT_STATE }
    show if:
      variable: x.service_address
      is: None
  - ${ x.service_address.zip_label }: x.service_address.zip
    required: False      
    show if:
      variable: x.service_address
      is: None
  - ${ x.service_address.country_label }: x.service_address.country
    code: countries_list()
    default: ${ AL_DEFAULT_COUNTRY }
    show if:
      variable: x.service_address
      is: None
---
generic object: ALIndividual
code: |
  if x.attorney.there_are_any:
    x.service_email = x.attorney[0].email
  else:
    x.service_email = x.email